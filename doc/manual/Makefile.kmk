# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the Nemu User Manual.
#

#
# Copyright (C) 2006-2015 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

#
# This slightly messy makefile transforms the DocBook XML source for the
# user manual into presentation output. We support two targets:
#
#   -- UserManual.pdf, generated by LaTex
#
#   -- VirtualBox.chm
#
#   Both files end up in PATH_STAGE_BIN.
#
#   Both targets indirectly depend on the XML files in this directory;
#   "indirectly" because we first copy them to PATH_TARGET and hack them
#   up a bit for variable substitution and such (see below).
#   The toolchains are roughly like this:
#
#   -- PDF file via Apache FOP: pre-process the XML files in PATH_TARGET,
#      then create a .FO file (another XML format for "formatted objects")
#      via xsltproc, then feed the .FO file to Apache FOP to create the PDF.
#
#   -- PDF file via LaTeX: pre-process the XML files in PATH_TARGET, then
#      run our custom "dblatex" perl script on UserManual.xml, which parses
#      the XML (using the Perl SAX parsers) and dumps a matching latex file
#      to UserManual.tex. This is then regularly processed by pdflatex to
#      generate PDF.
#
#   -- CHM file: again, pre-process the XML files in PATH_TARGET, then use
#      xsltproc to create a .HHP file for the Microsoft Help Compiler, then
#      feed that file to it.
#

SUB_DEPTH = ../..
include $(KBUILD_PATH)/subheader.kmk


#
# Globals
#

# Error out if someone tries to override old globals.
ifdef HTMLHELPOPTS
 $(error HTMLHELPOPTS was renamed to NEMU_HTMLHELP_OPTS!)
endif
ifdef DOCBOOKPATH
 $(error DOCBOOKPATH was renamed to NEMU_PATH_DOCBOOK!)
endif
ifdef DOCBOOKPATH
 $(error DOCBOOKPATH was renamed to NEMU_PATH_DOCBOOK!)
endif
ifdef XML_CATALOG
 $(error XML_CATALOG was renamed to NEMU_XML_CATALOG!)
endif
ifdef NEMU_XML_CATALOG_DOCBOOK
 $(error XML_CATALOG_DOCBOOK was renamed to NEMU_XML_CATALOG_DOCBOOK!)
endif
ifdef NEMUMANAGEPATH
 $(error NEMUMANAGEPATH was renamed to NEMUMANAGEHELP_PATH!)
endif
ifdef PDFLATEX_INTERACTION
 $(error PDFLATEX_INTERACTION was renamed to NEMU_PDFLATEX_INTERACTION!)
endif
ifdef PDFLATEX
 $(error PDFLATEX was renamed to NEMU_PDFLATEX_CMD!)
endif
ifdef HHC
 $(error HHC was renamed to NEMU_HHC!)
endif

# Source and output locations.
NEMU_PATH_MANUAL_SRC     := $(PATH_SUB_CURRENT)
NEMU_PATH_MANUAL_OUTBASE := $(PATH_TARGET)/manual

# tool locations
ifndef NEMU_OSE
 # use docbook from our tools directory
 NEMU_PATH_DOCBOOK        ?= $(PATH_DEVTOOLS)/common/DocBook/v1.69.1
 NEMU_PATH_DOCBOOK_DTD    ?= $(PATH_DEVTOOLS)/common/docbook-xml/v4.3
 NEMU_XML_CATALOG         ?= $(NEMU_PATH_MANUAL_OUTBASE)/catalog
 NEMU_XML_CATALOG_DOCBOOK ?= $(NEMU_PATH_MANUAL_OUTBASE)/docbook
else
 # use docbook of the build host
 NEMU_PATH_DOCBOOK        ?= http://docbook.sourceforge.net/release/xsl/current/
endif

# xsltproc with the catalog trick if applicable.
ifdef NEMU_XML_CATALOG
 NEMU_XSLTPROC_WITH_CAT    = $(REDIRECT) -E "XML_CATALOG_FILES=$(NEMU_XML_CATALOG)" -- \
 	$(NEMU_XSLTPROC) --nonet --xinclude $(NEMU_XSLTPROC_OPTS)
 NEMU_XMLLINT_WITH_CAT     = $(REDIRECT) -E "XML_CATALOG_FILES=$(NEMU_XML_CATALOG)" -- \
	$(NEMU_XMLLINT) --nonet --xinclude --noout $(NEMU_XMLLINT_OPTS)
else
 NEMU_XSLTPROC_WITH_CAT    = $(NEMU_XSLTPROC) --nonet --xinclude $(NEMU_XSLTPROC_OPTS)
 NEMU_XMLLINT_WITH_CAT     = $(NEMU_XMLLINT) --nonet --xinclude --noout $(NEMU_XMLLINT_OPTS)
endif

NEMUMANAGEHELP_PATH       ?= $(PATH_STAGE_BIN)/NemuManageHelp$(SUFF_EXE)

 # NEMU_PDFLATEX_INTERACTION = errorstopmode - Use this when you wants to figure out build failures
 #                                             without catting the log a million times.
NEMU_PDFLATEX_INTERACTION ?= batchmode
ifeq ($(KBUILD_HOST),win)
 ifndef NEMU_PDFLATEX
  NEMU_PDFLATEX           := $(firstword $(rsort $(wildcard $(PATH_DEVTOOLS)/win.x86/miktex-portable/*/miktex/bin/pdflatex.exe)))
  ifneq ($(NEMU_PDFLATEX),)
   NEMU_PDFLATEX_CMD       = $(NEMU_PDFLATEX) -halt-on-error -interaction $(NEMU_PDFLATEX_INTERACTION)
  endif
 endif
 ifndef NEMU_PDFLATEX
  # Tell MiKTeX to automatically download packages if system wide install.
  NEMU_PDFLATEX           := pdflatex
  NEMU_PDFLATEX_CMD        = $(NEMU_PDFLATEX) -halt-on-error -interaction $(NEMU_PDFLATEX_INTERACTION) --enable-installer
 endif
else
 NEMU_PDFLATEX            ?= pdflatex
 NEMU_PDFLATEX_HALT        = $(shell ( $(NEMU_PDFLATEX) -version | head -1 | grep 141592 > /dev/null ) && echo -halt-on-error )
 NEMU_PDFLATEX_CMD         = pdflatex $(NEMU_PDFLATEX_HALT) -interaction $(NEMU_PDFLATEX_INTERACTION)
endif

# Windows HTML Help Workshop compiler (stupid thing always returns an error!)
NEMU_HHC = -$(EXEC_X86_WIN32) $(NEMU_PATH_HTML_HELP_WORKSHOP)/hhc.exe


# Additional xsltproc options when generating
NEMU_HTMLHELP_OPTS ?=

# SDK related globals.
NEMU_MANUAL_APIREF_TMP = $(NEMU_PATH_MANUAL_OUTBASE)/en_US/SDKRef_apiref.xml
NEMU_DOC_XIDL_SRC      = $(PATH_ROOT)/src/Nemu/Main/idl/VirtualBox.xidl
NEMU_DOC_XIDL_SRC_TMP  = $(NEMU_PATH_MANUAL_OUTBASE)/en_US/VirtualBox.xidl.tmp

##
# Non-pattern-rule approach to editing XSLT files.
# $(evalcall2 def_nemu_replace_paths_in_xslt)
# @param    1   The XSLT source file (relative to Makefile dir).
# @param    2   Optional output subdirectory (leading slash).
define def_nemu_replace_paths_in_xslt
OTHER_CLEAN += $$(NEMU_PATH_MANUAL_OUTBASE)$2/$(notdir $1)
$$(NEMU_PATH_MANUAL_OUTBASE)$2/$(notdir $1): $$(NEMU_PATH_MANUAL_SRC)/$1 | $$$$(dir $$$$@)
	$$(call MSG_L1,Pre-processing $$(<) to $$(@))
	$$(QUIET)$$(SED) \
		-e 's|@NEMU_PATH_DOCBOOK@|$$(NEMU_PATH_DOCBOOK)|g' \
		-e 's|@NEMU_PATH_MANUAL_SRC@|$$(NEMU_PATH_MANUAL_SRC)|g' \
		-e 's|@NEMU_PATH_MANUAL_OUTBASE@|$$(NEMU_PATH_MANUAL_OUTBASE)|g' \
		-e 's|@NEMU_PATH_MANUAL_OUT_LANG@|$$(NEMU_PATH_MANUAL_OUTBASE)$2|g' \
		--output "$$(@)" $$<
endef

##
# Non-pattern-rule approach to editing XML files.
# $(evalcall2 def_nemu_replace_stuff_in_xml)
# @param    1   The XSLT source file (relative to Makefile dir).
# @param    2   Optional output subdirectory (leading slash).
#
define def_nemu_replace_stuff_in_xml
OTHER_CLEAN += $$(NEMU_PATH_MANUAL_OUTBASE)$2/$(notdir $1)
$$(NEMU_PATH_MANUAL_OUTBASE)$2/$(notdir $1): $$(NEMU_PATH_MANUAL_SRC)/$1 $$(NEMU_VERSION_STAMP) | $$$$(dir $$$$@)
	$$(call MSG_L1,Pre-processing $$(<) to $$(@))
	$$(QUIET)$$(SED) \
		-e 's|@NEMU_PATH_DOCBOOK@|$$(NEMU_PATH_DOCBOOK)|g' \
		-e 's|@NEMU_PATH_MANUAL_SRC@|$$(NEMU_PATH_MANUAL_SRC)|g' \
		-e 's|@NEMU_PATH_MANUAL_OUTBASE@|$$(NEMU_PATH_MANUAL_OUTBASE)|g' \
		-e 's|@NEMU_PATH_MANUAL_OUT_LANG@|$$(NEMU_PATH_MANUAL_OUTBASE)$2|g' \
               \
		-e 's/@NEMU_VERSION_MAJOR@/$$(NEMU_VERSION_MAJOR)/g' \
	        -e 's/@NEMU_VERSION_MINOR@/$$(NEMU_VERSION_MINOR)/g' \
	        -e 's/@NEMU_VERSION_BUILD@/$$(NEMU_VERSION_BUILD)/g' \
	        -e 's/@NEMU_VERSION_STRING@/$$(NEMU_VERSION_STRING)/g' \
	        -e 's/@NEMU_VENDOR@/$$(NEMU_VENDOR)/g' \
	        -e 's/@NEMU_PRODUCT@/$$(NEMU_PRODUCT)/g' \
	        -e 's/@NEMU_C_YEAR@/$$(NEMU_C_YEAR)/g' \
               \
		--output "$$(@)" $$<
endef

## List of refentry files (manpages).
NEMU_MANUAL_XML_REFENTRY_FILES = \
	man_NemuManage-debugvm.xml \
	man_NemuManage-extpack.xml


#
# Targets
#

BLDDIRS += $(NEMU_PATH_MANUAL_OUTBASE) $(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/, $(NEMU_MANUAL_LANGUAGES))


if defined(NEMU_WITH_DOCS) && (!defined(NEMU_ONLY_BUILD) || defined(NEMU_ONLY_DOCS) || defined(NEMU_ONLY_SDK))
 if defined(NEMU_ONLY_SDK) || defined(NEMU_WITH_DOCS_SDKREF)
  ## @todo make this an install target, drop the BLDDIRS.
  OTHERS += \
  	$(NEMU_PATH_SDK)/docs/SDKRef.pdf
  BLDDIRS += \
  	$(NEMU_PATH_SDK)/docs
 endif

 ifdef NEMU_WITH_DOCS_CHM
  NEMU_PATH_BIN_CHM = $(PATH_STAGE_BIN)/VirtualBox.chm
 else  # Do not build chm.
  NEMU_PATH_BIN_CHM =
 endif

 ifndef NEMU_ONLY_SDK
  NEMU_MANUAL_PACK += \
  		$(PATH_STAGE_BIN)/UserManual.pdf \
  		$(NEMU_PATH_BIN_CHM)
  OTHERS += \
  	$(PATH_STAGE_BIN)/UserManual.pdf
  OTHERS.win += \
  	$(NEMU_PATH_BIN_CHM)
  OTHERS.linux += \
  	$(NEMU_PATH_BIN_CHM)

  ifdef NEMU_WITH_DOCS_TRANSLATIONS
   OTHERS += \
   	$(foreach f,$(NEMU_MANUAL_ADD_LANGUAGES),$(PATH_STAGE_BIN)/UserManual_$(f).pdf)
   ifdef NEMU_WITH_DOCS_CHM
   OTHERS.win += \
   	$(foreach f,$(NEMU_MANUAL_ADD_LANGUAGES),$(PATH_STAGE_BIN)/VirtualBox_$(f).chm)
   OTHERS.linux += \
   	$(foreach f,$(NEMU_MANUAL_ADD_LANGUAGES),$(PATH_STAGE_BIN)/VirtualBox_$(f).chm)
   endif
  endif
 endif # !NEMU_ONLY_SDK
 ifdef NEMU_ONLY_DOCS
  PACKING += $(PATH_STAGE_BIN)/NemuDocumentation.zip
 endif

 ifdef NEMU_WITH_DOCS_TRANSLATIONS
  NEMU_MANUAL_LANGUAGES += $(NEMU_MANUAL_ADD_LANGUAGES)
 endif

 NEMU_MANUAL_XML_CHANGELOG = \
 	user_ChangeLogImpl.xml

 NEMU_MANUAL_XML_FILES = \
 	UserManual.xml \
 	user_AdvancedTopics.xml \
 	user_BasicConcepts.xml \
 	user_Glossary.xml \
 	user_Frontends.xml \
 	user_Installation.xml \
 	user_GuestAdditions.xml \
 	user_Introduction.xml \
 	user_KnownIssues.xml \
 	user_PrivacyPolicy.xml \
 	user_Security.xml \
 	user_Technical.xml \
 	user_ThirdParty.xml \
 	user_Troubleshooting.xml \
 	user_NemuManage.xml \
 	user_VirtualBoxAPI.xml \
 	user_Storage.xml \
 	user_Networking.xml

 NEMU_MANUAL_XML_FILES_INCL_CHANGELOG = $(NEMU_MANUAL_XML_FILES) \
 	user_ChangeLog.xml

 NEMU_SDKREF_XML_FILES = \
 	SDKRef.xml

 # Wildcard the images path for every supported language
 $(foreach f,$(NEMU_MANUAL_LANGUAGES), \
 	$(eval NEMU_MANUAL_PNG_FILES_$$(f) := $$(patsubst $$(NEMU_PATH_MANUAL_SRC)/$$(f)/%,%,$$(wildcard $$(NEMU_PATH_MANUAL_SRC)/$$(f)/images/*.png))))

 NEMU_MANUAL_TEX_UNICODE_FILES = \
 	$(wildcard $(NEMU_PATH_MANUAL_SRC)/texfiles/unicode/*)

 NEMU_MANUAL_LATEX_FILES_TARGET = \
 	$(addprefix UserManual.,aux log out toc tex)

 NEMU_SDKREF_LATEX_FILES_TARGET = \
 	$(addprefix SDKRef.,aux log out toc tex)

 BLDDIRS += \
 	$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/,\
 		$(addsuffix /images, $(NEMU_MANUAL_LANGUAGES)) \
 		$(addsuffix /html-single, $(NEMU_MANUAL_LANGUAGES)) \
 		$(addsuffix /html-chunks, $(NEMU_MANUAL_LANGUAGES)) \
 		$(addsuffix /HTMLHelp, $(NEMU_MANUAL_LANGUAGES)) \
 		$(addsuffix /HTMLHelp/images, $(NEMU_MANUAL_LANGUAGES)) \
 	)

 ifdef NEMU_WITH_DOCS_CHM
 NEMU_MANUAL_PACK += \
 	$(foreach f,$(NEMU_MANUAL_ADD_LANGUAGES),$(PATH_STAGE_BIN)/UserManual_$(f).pdf $(PATH_STAGE_BIN)/VirtualBox_$(f).chm)
 endif

 OTHER_CLEAN += \
 	$(NEMU_XML_CATALOG) \
 	$(NEMU_XML_CATALOG_DOCBOOK) \
 	$(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/, \
 		$(NEMU_MANUAL_XML_FILES_INCL_CHANGELOG) \
               $(NEMU_MANUAL_XML_REFENTRY_FILES) \
               $(addprefix user_,$(NEMU_MANUAL_XML_REFENTRY_FILES)) \
               $(patsubst man_%,%.1,$(basename $(NEMU_MANUAL_XML_REFENTRY_FILES))) \
 		$(NEMU_MANUAL_LATEX_FILES_TARGET) \
		$(NEMU_MANUAL_PNG_FILES_$(lang)) \
 		$(notdir $(NEMU_MANUAL_TEX_UNICODE_FILES)) \
		$(addprefix HTMLHelp/,$(NEMU_MANUAL_PNG_FILES_$(lang))) \
               html-single/UserManual.html \
               $(addprefix HTMLHelp/,    index.html go01.html) \
               $(addprefix html-chunks/, index.html go01.html) \
               $(foreach n,01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 \
			,html-chunks/ch$(n).html \
			html-chunks/re$(n).html \
			HTMLHelp/ch$(n).html \
			HTMLHelp/re$(n).html \
			$(foreach d2,0 1 2 3 4 5 6 7 8 9,$(foreach d1,0 1 2 3 4 5 6 7 8 9,HTMLHelp/ch$(n)s$(d2)$(d1).html)) ) \
               $(foreach n,a b c \
			,html-chunks/ap$(n).html \
			HTMLHelp/ap$(n).html \
               	$(foreach s,01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20,HTMLHelp/ap$(n)s$(s).html) ) \
               HTMLHelp/toc.hhc \
               HTMLHelp/htmlhelp.hhp \
 		titlepage-htmlhelp.xsl \
		UserManual.pdf \
		VirtualBox.chm \
               ChangeLog.html \
               validatemanual.run \
		)) \
 	$(NEMU_PATH_MANUAL_OUTBASE)/$(NEMU_MANUAL_XML_CHANGELOG) \
 	$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/overview_,$(NEMU_MANUAL_XML_REFENTRY_FILES)) \
 	$(NEMU_PATH_MANUAL_OUTBASE)/user_NemuManage_CommandsOverview.xml \
 	$(foreach f,$(NEMU_MANUAL_ADD_LANGUAGES),$(PATH_STAGE_BIN)/UserManual_$(f).pdf) \
 	$(foreach f,$(NEMU_MANUAL_ADD_LANGUAGES),$(PATH_STAGE_BIN)/VirtualBox_$(f).chm) \
 	$(PATH_STAGE_BIN)/UserManual.pdf \
 	$(PATH_STAGE_BIN)/VirtualBox.chm \
       \
 	$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/, \
		$(NEMU_SDKREF_XML_FILES) \
		$(NEMU_SDKREF_LATEX_FILES_TARGET) \
		SDKRef.pdf \
		) \
	$(NEMU_DOC_XIDL_SRC_TMP) \
	$(NEMU_MANUAL_APIREF_TMP) \
 	$(PATH_STAGE_BIN)/sdk/docs/SDKRef.pdf

endif # if defined(NEMU_WITH_DOCS) && (!defined(NEMU_ONLY_BUILD) || defined(NEMU_ONLY_DOCS) || defined(NEMU_ONLY_SDK))



#
# To avoid network I/O for fetching DTDs, we generate catalogs mapping the public
# entity IDs to local files.  (Obviously, only done when we have local files.)
#
ifdef NEMU_XML_CATALOG
# Create a catalog file for xsltproc that points to docbook catalog.
$(NEMU_XML_CATALOG): $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_L1,Creating catalog $@)
	$(QUIET)$(RM) -f $@.tmp $@
	$(QUIET)$(APPEND) $@.tmp '<?xml version="1.0"?>'
	$(QUIET)$(APPEND) $@.tmp '<!DOCTYPE catalog PUBLIC "-//OASIS//DTD Entity Resolution XML Catalog V1.0//EN" "http://www.oasis-open.org/committees/entity/release/1.0/catalog.dtd">'
	$(QUIET)$(APPEND) $@.tmp '<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">'
	$(QUIET)$(APPEND) $@.tmp '  <delegatePublic publicIdStartString="-//OASIS/ENTITIES DocBook XML"      catalog="file:///$(NEMU_XML_CATALOG_DOCBOOK)"/>'
	$(QUIET)$(APPEND) $@.tmp '  <delegatePublic publicIdStartString="-//OASIS/DTD DocBook XML"           catalog="file:///$(NEMU_XML_CATALOG_DOCBOOK)"/>'
	$(QUIET)$(APPEND) $@.tmp '  <delegateSystem systemIdStartString="http://www.oasis-open.org/docbook/" catalog="file:///$(NEMU_XML_CATALOG_DOCBOOK)"/>'
	$(QUIET)$(APPEND) $@.tmp '  <delegateURI uriStartString="http://www.oasis-open.org/docbook/"         catalog="file:///$(NEMU_XML_CATALOG_DOCBOOK)"/>'
	$(QUIET)$(APPEND) $@.tmp '</catalog>'
	$(QUIET)$(MV) -f $@.tmp $@

# Create a docbook catalog file for xsltproc that points to the local docbook files.
$(NEMU_XML_CATALOG_DOCBOOK): $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_L1,Creating catalog $@)
	$(QUIET)$(RM) -f $@.tmp $@
	$(QUIET)$(APPEND) $@.tmp '<?xml version="1.0"?>'
	$(QUIET)$(APPEND) $@.tmp '<!DOCTYPE catalog PUBLIC "-//OASIS//DTD Entity Resolution XML Catalog V1.0//EN" "http://www.oasis-open.org/committees/entity/release/1.0/catalog.dtd">'
	$(QUIET)$(APPEND) $@.tmp '<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//ELEMENTS DocBook XML Information Pool V4.3//EN"          uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/dbpoolx.mod"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//DTD DocBook XML V4.3//EN"                                uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/docbookx.dtd"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//DTD DocBook XML V4.4//EN"                                uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/docbookx.dtd"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//ENTITIES DocBook XML Character Entities V4.3//EN"        uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/dbcentx.mod"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//ENTITIES DocBook XML Notations V4.3//EN"                 uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/dbnotnx.mod"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//ENTITIES DocBook XML Additional General Entities V4.3//EN" uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/dbgenent.mod"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//ELEMENTS DocBook XML Document Hierarchy V4.3//EN"        uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/dbhierx.mod"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//DTD XML Exchange Table Model 19990315//EN"               uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/soextblx.dtd"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="-//OASIS//DTD DocBook XML CALS Table Model V4.3//EN"               uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/calstblx.dtd"/>'
	$(QUIET)$(APPEND) $@.tmp '  <rewriteSystem systemIdStartString="http://www.oasis-open.org/docbook/xml/4.3" rewritePrefix="file:///$(NEMU_PATH_DOCBOOK_DTD)"/>'
	$(QUIET)$(APPEND) $@.tmp '  <rewriteURI         uriStartString="http://www.oasis-open.org/docbook/xml/4.3" rewritePrefix="file:///$(NEMU_PATH_DOCBOOK_DTD)"/>'
	$(QUIET)$(APPEND) $@.tmp '  <rewriteSystem systemIdStartString="http://www.oasis-open.org/docbook/xml/4.4" rewritePrefix="file:///$(NEMU_PATH_DOCBOOK_DTD)"/>'
	$(QUIET)$(APPEND) $@.tmp '  <rewriteURI         uriStartString="http://www.oasis-open.org/docbook/xml/4.4" rewritePrefix="file:///$(NEMU_PATH_DOCBOOK_DTD)"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Added Math Symbols: Arrow Relations//EN"   uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-amsa.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Added Math Symbols: Binary Operators//EN"  uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-amsb.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Added Math Symbols: Delimiters//EN"        uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-amsc.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Added Math Symbols: Negated Relations//EN" uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-amsn.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Added Math Symbols: Ordinary//EN"          uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-amso.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Added Math Symbols: Relations//EN"         uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-amsr.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Box and Line Drawing//EN"                  uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-box.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Russian Cyrillic//EN"                      uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-cyr1.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Non-Russian Cyrillic//EN"                  uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-cyr2.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Diacritical Marks//EN"                     uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-dia.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Greek Letters//EN"                         uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-grk1.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Monotoniko Greek//EN"                      uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-grk2.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Greek Symbols//EN"                         uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-grk3.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Alternative Greek Symbols//EN"             uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-grk4.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Added Latin 1//EN"                         uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-lat1.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Added Latin 2//EN"                         uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-lat2.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Numeric and Special Graphic//EN"           uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-num.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES Publishing//EN"                            uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-pub.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '  <public publicId="ISO 8879:1986//ENTITIES General Technical//EN"                     uri="file:///$(NEMU_PATH_DOCBOOK_DTD)/ent/iso-tech.ent"/>'
	$(QUIET)$(APPEND) $@.tmp '</catalog>'
	$(QUIET)$(MV) -f $@.tmp $@
endif


if defined(NEMU_WITH_DOCS) && (!defined(NEMU_ONLY_BUILD) || defined(NEMU_ONLY_DOCS) || defined(NEMU_ONLY_SDK))


##########################################################################################
#
#  Rules: Preprocess DocBook XML files
#  (preliminary step for both CHM and PDF generation)
#
##########################################################################################

#
# The following rules for $(NEMU_PATH_MANUAL_OUTBASE)/*.xml process the XML files
# in doc/manual to allow for some magic variable replacements. The PDF and CHM
# targets do not depend on the XML files in doc/manual, but those in
# $(NEMU_PATH_MANUAL_OUTBASE) instead, which we copy there from here, after that magic
# processing.
#
# So, before copying, the following steps are performed:
#
# -- $NEMU_VERSION_* strings are replaced with the actual current Nemu version.
# -- $NEMU_MANAGE_OUTPUT (in NemuManage.xml) is replaced with the current
#    output of the actual NemuManage program, to save us from having to
#    update the manual all the time.
#

# Only one changelog for all languages
# $(NEMU_PATH_MANUAL_OUTBASE)/$(NEMU_MANUAL_XML_CHANGELOG): $(NEMU_PATH_MANUAL_SRC)/$(NEMU_MANUAL_XML_CHANGELOG) | $$(dir $$@)
# 	$(QUIET)$(INSTALL) -m 0644 $< $@

# Manual dependency on user_ChangeLogImpl.xml
$(foreach lang,$(NEMU_MANUAL_LANGUAGES) \
,$(eval $(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/user_ChangeLog.xml: $(NEMU_PATH_MANUAL_SRC)/user_ChangeLogImpl.xml))

# Manual dependency for user_NemuManage.xml.
$(foreach lang,$(NEMU_MANUAL_LANGUAGES), \
$(eval $$(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/user_NemuManage.xml: $(NEMU_PATH_MANUAL_SRC)/$(lang)/user_NemuManage.xml \
	$$(addprefix $$(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/user_,$$(filter man_NemuManage%,$$(NEMU_MANUAL_XML_REFENTRY_FILES))) \
	$$(addprefix $$(NEMU_PATH_MANUAL_OUTBASE)/overview_,$$(filter man_NemuManage%,$$(NEMU_MANUAL_XML_REFENTRY_FILES))) \
	$(NEMU_PATH_MANUAL_OUTBASE)/user_NemuManage_CommandsOverview.xml ))

# Intermediate step to do some variable replacement in the document.
$(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(foreach file,$(NEMU_MANUAL_XML_FILES_INCL_CHANGELOG) \
,$(evalcall2 def_nemu_replace_stuff_in_xml,/$(lang)/$(file),/$(lang))))

##
# Morph man pages into manual sections.
# $(evalcall2 def_nemu_refentry_to_user_sect1)
# @param    1   The XSLT source file (relative to Makefile dir).
# @param    2   Optional output subdirectory.
define def_nemu_refentry_to_user_sect1
$$(NEMU_PATH_MANUAL_OUTBASE)/$(1)/user_$(2): \
		$$(NEMU_PATH_MANUAL_SRC)/$(1)/$(2) \
		$$(NEMU_PATH_MANUAL_SRC)/docbook-refentry-to-manual-sect1.xsl \
		$$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) \
		$$(NEMU_VERSION_STAMP) | $$(dir $$@)
	$$(call MSG_TOOL,xsltproc $$(notdir $$(filter %.xsl,$$^)),,$$(filter %.xml,$$^),$$@)
	$$(QUIET)$$(RM) -f "$$@"
	$$(QUIET)$$(NEMU_XSLTPROC_WITH_CAT) --output $$@ $$(NEMU_PATH_MANUAL_SRC)/docbook-refentry-to-manual-sect1.xsl $$<
endef
$(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(foreach file,$(NEMU_MANUAL_XML_REFENTRY_FILES) \
, $(evalcall2 def_nemu_refentry_to_user_sect1,$(lang),$(file))))


# Generates the NemuManage command overview include file (shared between
# languages) from the refsynopsisdiv section of the man pages.
$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/overview_,$(NEMU_MANUAL_XML_REFENTRY_FILES)): \
		$(NEMU_PATH_MANUAL_SRC)/docbook-refentry-to-manual-overview.xsl \
		$$(patsubst overview_%,$$(NEMU_PATH_MANUAL_SRC)/en_US/%,$$(notdir $$@)) \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) \
               | $$(dir $$@)
	$(call MSG_TOOL,xsltproc $(notdir $(filter %.xsl,$^)),,$(firstword $(filter %.xml,$^)),$@)
	$(QUIET)$(NEMU_XSLTPROC_WITH_CAT) --output "$@" $< $(filter %.xml,$^)

$(NEMU_PATH_MANUAL_OUTBASE)/user_NemuManage_CommandsOverview.xml: $(NEMUMANAGEHELP_PATH) $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_GENERATE,,$@,)
	$(QUIET)$(RM) -f $@ $@.dumpopts
	$(QUIET)$(APPEND) -tn "$@" \
		'<?xml version="1.0" encoding="UTF-8"?>' \
               '<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">' \
               '<sect1> <!-- this will be skipped via xpointer in the include. --> '
	$(QUIET)$(REDIRECT) -wo $@.dumpopts -E 'NEMU_LOG_FLAGS=disabled' -E 'NEMU_LOG_DEST=nofile' \
		$(if $(eq $(KBUILD_TARGET),darwin), -E 'DYLD_FALLBACK_LIBRARY_PATH=$(dir $(LIB_RUNTIME))') \
		-- \
		$(NEMUMANAGEHELP_PATH) --dumpopts
	$(QUIET)$(SED) \
		-e ':a' \
		-e 'N' \
		-e '$(DOLLAR)!ba' \
		-e 's/</\&lt\;/g' \
		-e 's/>/\&gt\;/g' \
		-e 's/\n*$(DOLLAR)/<\/screen>/' \
		-e 's/^/<screen>/' \
		--append $@ $@.dumpopts
	$(QUIET)$(RM) -f $@.dumpopts
	$(QUIET)$(APPEND) -n "$@" \
               '  <remark role="NemuManage-overview">' \
               $(foreach refentry, $(filter man_NemuManage%,$(NEMU_MANUAL_XML_REFENTRY_FILES)) \
		, '  <xi:include href="overview_$(refentry)" xpointer="element(/1)" xmlns:xi="http://www.w3.org/2001/XInclude" />') \
               '  </remark>' \
               '</sect1>'




##########################################################################################
#
#  Shared rules for PDF generation
#
##########################################################################################

ifndef NEMU_OSE
# copy ucs.sty and related files
$(foreach f,$(NEMU_MANUAL_LANGUAGES),$(NEMU_PATH_MANUAL_OUTBASE)/$f/ucs.sty):
	$(call MSG_L1,Copying unicode support for LaTeX)
	$(QUIET)$(INSTALL_STAGING) -m0644 -- $(NEMU_MANUAL_TEX_UNICODE_FILES) "$(@D)"
endif

# copy the PNG files.
# Note: out_dir needs to be referenced with an escaped $ so it doesn't expand as eval expands it input.
define def_nemu_cp_images_pdf
local out_dir := $(NEMU_PATH_MANUAL_OUTBASE)/$(lang)
$(addprefix $$(out_dir)/,$(NEMU_MANUAL_PNG_FILES_$(lang))): \
		$$(out_dir)/%: $(NEMU_PATH_MANUAL_SRC)/$(lang)/% | $$$$(dir $$$$@)
	$$(call MSG_L1,Copying temporary $$< => $$@)
	$$(QUIET)$$(INSTALL_STAGING) -m0644 -- '$$<' '$$(@D)'
endef

$(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(evalcall2 def_nemu_cp_images_pdf))


##########################################################################################
#
#  UserManual.pdf
#
##########################################################################################

## @todo INSTALLS target for this!
$(PATH_STAGE_BIN)/UserManual.pdf: $(NEMU_PATH_MANUAL_OUTBASE)/en_US/UserManual.pdf | $$(dir $$@)
	$(QUIET)$(CP) $< $@
	$(call MSG_L1,Fresh LaTeX-generated PDF is now at $@)

$(foreach f,$(NEMU_MANUAL_ADD_LANGUAGES),$(PATH_STAGE_BIN)/UserManual_$(f).pdf): \
	$(PATH_STAGE_BIN)/UserManual_%.pdf : $(NEMU_PATH_MANUAL_OUTBASE)/%/UserManual.pdf
	$(QUIET)$(CP) $< $@
	$(call MSG_L1,Fresh LaTeX-generated PDF is now at $@)

$(foreach f,$(NEMU_MANUAL_LANGUAGES),$(NEMU_PATH_MANUAL_OUTBASE)/$f/UserManual.pdf): \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/UserManual.pdf : \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/UserManual.tex \
		$(if $(NEMU_OSE),,$(NEMU_PATH_MANUAL_OUTBASE)/%/ucs.sty) \
		$(foreach f,$(NEMU_MANUAL_LANGUAGES),\
		  $(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/$f/,$(NEMU_MANUAL_PNG_FILES_$(f)))) | $$(dir $$@)
# PDF generation via Latex: generate the .tex file
	$(call MSG_L1,pdflatex $< (four passes) -> $@)
	$(QUIET)$(REDIRECT) -w+ti /dev/null -C $(@D) -- $(NEMU_PDFLATEX_CMD) UserManual.tex
	$(QUIET)$(REDIRECT) -w+ti /dev/null -C $(@D) -- $(NEMU_PDFLATEX_CMD) UserManual.tex
	$(QUIET)$(REDIRECT) -w+ti /dev/null -C $(@D) -- $(NEMU_PDFLATEX_CMD) UserManual.tex
	$(QUIET)$(REDIRECT) -w+ti /dev/null -C $(@D) -- $(NEMU_PDFLATEX_CMD) UserManual.tex
	$(QUIET)$(SED) -ne '/Warning: Hyper reference/p' $(basename $<).log
	$(QUIET)$(SED) -n \
		-e '/Warning: There were \(undefined references\|multiply-defined labels\)/{p; q 1}' \
		$(basename $@).log

##@todo restore this when above has been converted to INSTALLS target.	$(call MSG_L1,Fresh LaTeX-generated PDF is now at $@)

# generate temporary LaTeX source from processed XML
$(foreach f,$(NEMU_MANUAL_LANGUAGES),$(NEMU_PATH_MANUAL_OUTBASE)/$f/UserManual.tex): \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/UserManual.tex : \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/UserManual.xml \
		$(NEMU_PATH_MANUAL_SRC)/docbook2latex.xsl \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/%/,$(NEMU_MANUAL_XML_FILES_INCL_CHANGELOG)) \
		$(if $(and $(NEMU_HAVE_XMLLINT),$(NEMU_PATH_DOCBOOK_DTD)),$(NEMU_PATH_MANUAL_OUTBASE)/%/validatemanual.run,) \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) $(MAKEFILE_CURRENT)
	$(call MSG_TOOL,xsltproc $(notdir $(filter %.xsl,$^)),,$(firstword $(filter %.xml,$^)),$@)
	$(QUIET)$(RM) -f $(addprefix $(@D)/,$(NEMU_MANUAL_LATEX_FILES_TARGET))
#   generate TeX source from processed docbook and store it in UserManual.tex.tmp;
#   pass current language to xsltproc in TARGETLANG variable (extract it from the
#   current directory, should become "de_DE" or the like)
	$(QUIET)$(NEMU_XSLTPROC_WITH_CAT) --stringparam TARGETLANG $(notdir $(@D)) \
		-o $@.tmp $(NEMU_PATH_MANUAL_SRC)/docbook2latex.xsl $<
#   for pretty quotes, replace " with `` or '' depending on whether it's at the start of a word;
#   the \QUOTE{} was inserted by docbook2latex.xsl for all quotes _outside_ of screen sections
	$(QUIET)$(SED) \
		-e 's|^\\QUOTE{}|\\OQ{}|g' \
		-e 's|\(\W\)\\QUOTE{}|\1\\OQ{}|g' \
		-e 's|\(\w\)\\QUOTE{}|\1\\CQ{}|g' \
		--output $@ $@.tmp
	$(QUIET)$(RM) -f $@.tmp

# Useful aliases
usermanual UserManual.pdf:: $(PATH_STAGE_BIN)/UserManual.pdf

debug-usermanual:
	$(MAKE) --pretty-command-printing -j1 NEMU_PDFLATEX_INTERACTION=errorstopmode $(PATH_STAGE_BIN)/UserManual.pdf

#
# Generate rules for validating the UserManual.xml.  These are invoked
# automatically at build time, but can also be manually invoked via the
# 'validatemanual' and 'validatemanual_<lang>' aliases.
#
define def_nemu_validate_xml
validatemanual_$(lang):: $$(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/validatemanual.run
$$(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/validatemanual.run: \
		$$(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/UserManual.xml \
		$$(addprefix $$(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/,$$(NEMU_MANUAL_XML_FILES_INCL_CHANGELOG)) \
		$$(NEMU_XML_CATALOG) $$(NEMU_XML_CATALOG_DOCBOOK) $$(MAKEFILE_CURRENT) | $$$$(dir $$$$@)
	$$(call MSG_L1,Validating $$<)
	$$(QUIET)$$(NEMU_XMLLINT_WITH_CAT) --dtdvalid $$(NEMU_PATH_DOCBOOK_DTD)/docbookx.dtd $$<
	$$(QUIET)$$(APPEND) -t "$$@" "done"
endef
$(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(evalcall2 def_nemu_validate_xml))
validatemanual:: $(foreach lang,$(NEMU_MANUAL_LANGUAGES),validatemanual_$(lang))



#
# SDKRef.pdf
#

# Replace <tt> tags in VirtualBox.xidl.
$(NEMU_DOC_XIDL_SRC_TMP): $(NEMU_DOC_XIDL_SRC) $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_L1,Generating $@)
	$(QUIET)$(SED) -e 's|@a \+\(\w\+\)|<tt>\1</tt>|g' \
	       -e 's|@c \+\(\w\+\)|<tt>\1</tt>|g' \
	       --output $@ $<

# Generate SDKRef_apiref.xml as a docbook file excerpt that will be referenced from the SDKRef.xml.
$(NEMU_MANUAL_APIREF_TMP): $(NEMU_PATH_MANUAL_SRC)/xidl2docbook.xsl $(NEMU_DOC_XIDL_SRC_TMP)
	$(call MSG_L1,Generating $@)
	$(QUIET)$(NEMU_XSLTPROC) $(NEMU_XSLTPROC_OPTS) --xinclude --nonet -o $@ $< $(NEMU_DOC_XIDL_SRC_TMP)

$(evalcall2 def_nemu_replace_stuff_in_xml,/en_US/SDKRef.xml,/en_US)
$(NEMU_PATH_MANUAL_OUTBASE)/en_US/SDKRef.xml: $(NEMU_MANUAL_APIREF_TMP)

# Turn SDKRef.xml into latex.
$(NEMU_PATH_MANUAL_OUTBASE)/en_US/SDKRef.tex: \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(NEMU_SDKREF_XML_FILES)) \
		$(NEMU_PATH_MANUAL_SRC)/docbook2latex.xsl \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_TOOL,xsltproc $(notdir $(filter %.xsl,$^)),,$(firstword $(filter %.xml,$^)),$@)
	$(QUIET)$(RM) -f $(addprefix $(@D/),$(NEMU_SDKREF_LATEX_FILES_TARGET))
##      check it for validity first.
#ifdef NEMU_HAVE_XMLLINT
#	$(QUIET)$(NEMU_XMLLINT_WITH_CAT) --dtdvalid $(NEMU_PATH_DOCBOOK_DTD)/docbookx.dtd $<
#endif
#	generate TeX source from processed docbook and store it in SDKRef.tex.tmp
	$(QUIET)$(NEMU_XSLTPROC_WITH_CAT) --stringparam TARGETLANG en_US \
		-o $@.tmp $(NEMU_PATH_MANUAL_SRC)/docbook2latex.xsl $<
#	for pretty quotes, replace " with `` or '' depending on whether it's at the start of a word;
#   the \QUOTE{} was inserted by docbook2latex.xsl for all quotes _outside_ of screen sections
	$(QUIET)$(SED) \
		-e 's|^\\QUOTE{}|\\OQ{}|g' \
		-e 's|\(\W\)\\QUOTE{}|\1\\OQ{}|g' \
		-e 's|\(\w\)\\QUOTE{}|\1\\CQ{}|g' \
		--output $@ $@.tmp
	$(QUIET)$(RM) -f $@.tmp

# Turn SDKRef.tex into a PDF.
$(NEMU_PATH_SDK)/docs/SDKRef.pdf: \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/SDKRef.tex \
		$(if $(NEMU_OSE),,$(NEMU_PATH_MANUAL_OUTBASE)/en_US/ucs.sty) \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(NEMU_MANUAL_PNG_FILES_en_US)) | $$(dir $$@)
	$(QUIET)$(MKDIR) -p $(NEMU_PATH_SDK)/docs
	$(call MSG_L1,pdflatex $< (three passes))
	$(QUIET)$(REDIRECT) -C $(<D) -- $(NEMU_PDFLATEX_CMD) SDKRef.tex
	$(QUIET)$(REDIRECT) -C $(<D) -- $(NEMU_PDFLATEX_CMD) SDKRef.tex
	$(QUIET)$(REDIRECT) -C $(<D) -- $(NEMU_PDFLATEX_CMD) SDKRef.tex
	$(QUIET)$(SED) -ne '/Warning: Hyper reference/p' $(basename $<).log
	$(QUIET)$(SED) -n \
		-e '/Warning: There were \(undefined references\|multiply-defined labels\)/{p; q 1}' \
		$(basename $<).log
	$(QUIET)$(CP) $(<D)/SDKRef.pdf $@
	$(call MSG_L1,Fresh LaTeX-generated PDF is now at $@)


# Handy aliases.
validate-sdkref:: $(NEMU_PATH_MANUAL_OUTBASE)/en_US/SDKRef.xml
sdkref:: $(NEMU_PATH_SDK)/docs/SDKRef.pdf


ifdef NEMU_WITH_DOCS_CHM
 #
 # VirtualBox.chm
 #
 # We first generate a .hhp help source file from the preprocessed
 # DocBook XML files, as defined above, then feed that into the
 # Microsoft Help Compiler.
 #
 $(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(evalcall2 def_nemu_replace_paths_in_xslt,docbook-htmlhelp-formatcfg.xsl,/$(lang)))

 # Manual formatcfg dependencies for the above.
 $(foreach lang,$(NEMU_MANUAL_LANGUAGES), $(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/docbook-htmlhelp-formatcfg.xsl): \
 	$(NEMU_PATH_MANUAL_SRC)/common-formatcfg.xsl \
 	$(NEMU_PATH_MANUAL_SRC)/common-html-formatcfg.xsl

 $(PATH_STAGE_BIN)/VirtualBox.chm: $(NEMU_PATH_MANUAL_OUTBASE)/en_US/VirtualBox.chm
	$(QUIET)$(CP) $< $@
	$(call MSG_L1,Fresh CHM is now at $@)

 $(foreach f,$(NEMU_MANUAL_ADD_LANGUAGES),$(PATH_STAGE_BIN)/VirtualBox_$(f).chm): \
	$(PATH_STAGE_BIN)/VirtualBox_%.chm : $(NEMU_PATH_MANUAL_OUTBASE)/%/VirtualBox.chm
	$(QUIET)$(CP) $< $@
	$(call MSG_L1,Fresh CHM is now at $@)

 $(foreach f,$(NEMU_MANUAL_LANGUAGES),$(NEMU_PATH_MANUAL_OUTBASE)/$f/VirtualBox.chm): \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/VirtualBox.chm: \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/HTMLHelp/htmlhelp.hhp \
		$(foreach f,$(NEMU_MANUAL_LANGUAGES),$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/$f/HTMLHelp/,$(NEMU_MANUAL_PNG_FILES_$(f))))
	$(call MSG_L1,hhc $<,=> $@)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(NEMU_HHC) $(subst /,\\,$<)

 # Prepare the XSL file for our title page, htmlhelp variant.
 $(foreach f,$(NEMU_MANUAL_LANGUAGES),$(NEMU_PATH_MANUAL_OUTBASE)/$f/titlepage-htmlhelp.xsl): \
		$(NEMU_PATH_MANUAL_SRC)/titlepage-htmlhelp.xml $(MAKEFILE_CURRENT) | $$(dir $$@)
	$(call MSG_L1,xsltproc $<)
	$(QUIET)$(RM) -f $@.tmp $@
	$(QUIET)$(NEMU_XSLTPROC) --xinclude --nonet -o $@.tmp $(NEMU_PATH_DOCBOOK)/template/titlepage.xsl $<
	$(QUIET)$(MV) -f $@.tmp $@

 $(foreach f,$(NEMU_MANUAL_LANGUAGES),$(NEMU_PATH_MANUAL_OUTBASE)/$f/HTMLHelp/htmlhelp.hhp): \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/HTMLHelp/htmlhelp.hhp: \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/UserManual.xml \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/docbook-htmlhelp-formatcfg.xsl \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/titlepage-htmlhelp.xsl \
		$(NEMU_PATH_MANUAL_OUTBASE)/%/validatemanual.run \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/%/,$(NEMU_MANUAL_XML_FILES_INCL_CHANGELOG)) \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK)
	$(call MSG_TOOL,xsltproc $(notdir $(firstword $(filter %.xsl,$^))),,$(firstword $(filter %.xml,$^)),$@)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(MKDIR) -p $(@D)
	$(QUIET)$(NEMU_XSLTPROC_WITH_CAT) --output $(@D)/ \
		--stringparam htmlhelp.chm \
		$(subst /,\\,$(@D)/../VirtualBox.chm) \
		$(HTMLHELPOPTS) $(@D)/../docbook-htmlhelp-formatcfg.xsl \
		$<

 # copy the PNG files.
 # Note: out_dir needs to be referenced with an escaped $ so it doesn't expand as eval expands it input.
 define def_nemu_cp_images_html
 local out_dir := $(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/HTMLHelp
 $$(addprefix $$(out_dir)/,$(NEMU_MANUAL_PNG_FILES_$(lang))): \
			$$(out_dir)/%: $(NEMU_PATH_MANUAL_SRC)/$(lang)/% | $$$$(dir $$$$@)
	$$(call MSG_L1,Copying temporary $$< => $$@)
	$$(QUIET)$$(CP) -f $$< $$@
 endef

 $(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(eval $(def_nemu_cp_images_html)))

 # Packing the docs into a zip file
 $(PATH_STAGE_BIN)/NemuDocumentation.zip: $(NEMU_MANUAL_PACK)
	$(call MSG_L1,Packing documentation $@)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(REDIRECT) -C $(PATH_STAGE_BIN) -- zip$(HOSTSUFF_EXE) -9 $@ $(notdir $^)

endif # NEMU_WITH_DOCS_CHM


##########################################################################################
#
#  UserManual.html
#
##########################################################################################
$(evalcall2 def_nemu_replace_paths_in_xslt,docbook-html-one-page-formatcfg.xsl,/en_US)
$(evalcall2 def_nemu_replace_paths_in_xslt,docbook-html-chunks-formatcfg.xsl,/en_US)

# Manual formatcfg dependencies.
$(NEMU_PATH_MANUAL_OUTBASE)/en_US/docbook-html-one-page-formatcfg.xsl \
$(NEMU_PATH_MANUAL_OUTBASE)/en_US/docbook-html-chunks-formatcfg.xsl: \
	$(NEMU_PATH_MANUAL_SRC)/common-formatcfg.xsl \
	$(NEMU_PATH_MANUAL_SRC)/common-html-formatcfg.xsl

$(NEMU_PATH_MANUAL_OUTBASE)/en_US/html-single/UserManual.html: \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/docbook-html-one-page-formatcfg.xsl \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(NEMU_MANUAL_XML_FILES_INCL_CHANGELOG)) \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(NEMU_MANUAL_PNG_FILES_en_US)) \
		$(if $(NEMU_HAVE_XMLLINT),$(NEMU_PATH_MANUAL_OUTBASE)/en_US/validatemanual.run,) \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) \
		| $$(dir $$@)
	$(call MSG_TOOL,xsltproc $(notdir $(firstword $(filter %.xsl,$^))),,$(firstword $(filter %.xml,$^)),$@)
	$(QUIET)$(NEMU_XSLTPROC_WITH_CAT) \
		--output $(NEMU_PATH_MANUAL_OUTBASE)/en_US/html-single/UserManual.html \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/docbook-html-one-page-formatcfg.xsl \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/UserManual.xml

$(NEMU_PATH_MANUAL_OUTBASE)/en_US/html-chunks/index.html: \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/docbook-html-chunks-formatcfg.xsl \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(NEMU_MANUAL_XML_FILES_INCL_CHANGELOG)) \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(NEMU_MANUAL_PNG_FILES_en_US)) \
		$(if $(NEMU_HAVE_XMLLINT),$(NEMU_PATH_MANUAL_OUTBASE)/en_US/validatemanual.run,) \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) \
		| $$(dir $$@)
	$(call MSG_TOOL,xsltproc $(notdir $(firstword $(filter %.xsl,$^))),,$(firstword $(filter %.xml,$^)),$@)
	$(QUIET)$(NEMU_XSLTPROC_WITH_CAT) \
		--output $(NEMU_PATH_MANUAL_OUTBASE)/en_US/html-chunks/index.html \
		--stringparam chunk.section.depth 0 \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/docbook-html-chunks-formatcfg.xsl \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/UserManual.xml

$(NEMU_PATH_MANUAL_OUTBASE)/en_US/UserManual.zip: \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/html-single/UserManual.html \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/html-chunks/index.html
	$(call MSG_L1,Packing documentation $@)
	$(QUIET)$(RM) -f $@
	$(QUIET)$(REDIRECT) -C $(NEMU_PATH_MANUAL_OUTBASE)/en_US/ -- zip$(HOSTSUFF_EXE) \
		-9 -r $@ html-single html-chunks $(NEMU_MANUAL_PNG_FILES_en_US)

html:: $(NEMU_PATH_MANUAL_OUTBASE)/en_US/html-single/UserManual.html
html:: $(NEMU_PATH_MANUAL_OUTBASE)/en_US/html-chunks/index.html
html-zip:: $(NEMU_PATH_MANUAL_OUTBASE)/en_US/UserManual.zip


#
# ChangeLog.html
#
# This XSLT rule depends on $(NEMU_PATH_MANUAL_OUTBASE)/en_US/user_ChangeLog.xml, which is build by the complex rule
#    $(foreach f,$(NEMU_MANUAL_LANGUAGES),$(NEMU_PATH_MANUAL_OUTBASE)/$f/user_ChangeLog.xml): ...
# much further above. That rule takes en_US/user_ChangeLog.xml and replaces $VIRTUALBOX_CHANGELOG_IMPL
# with the actual change log contained in user_ChangeLogImpl.xml
#
$(evalcall2 def_nemu_replace_paths_in_xslt,docbook-changelog-formatcfg.xsl,/en_US)
$(NEMU_PATH_MANUAL_OUTBASE)/en_US/ChangeLog.html: \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/docbook-changelog-formatcfg.xsl \
		$(NEMU_PATH_MANUAL_OUTBASE)/en_US/user_ChangeLog.xml \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) | $$(dir $$@)
	$(call MSG_TOOL,xsltproc $(notdir $(firstword $(filter %.xsl,$^))),,$(firstword $(filter %.xml,$^)),$@)
	$(QUIET)$(NEMU_XSLTPROC_WITH_CAT) --output "$@" "$<" $(filter %.xml,$^)
	$(call MSG_L1,Fresh ChangeLog.html is now at $@)

cl-html:: $(NEMU_PATH_MANUAL_OUTBASE)/en_US/ChangeLog.html



endif # if defined(NEMU_WITH_DOCS) && (!defined(NEMU_ONLY_BUILD) || defined(NEMU_ONLY_DOCS) || defined(NEMU_ONLY_SDK))


#
# NemuManage man pages (parts also required by NemuManage build-in help).
#
$(evalcall2 def_nemu_replace_paths_in_xslt,docbook-refentry-to-manpage.xsl,)

##
# Emits rules for preprocessing refentry sources (applying remarks element),
# and for producing the actual man pages.
# $(evalcall2 def_nemu_refentry_to_manpage)
# @param    1   The language
# @param    2   The file name (no path).
define def_nemu_refentry_to_manpage
$$(NEMU_PATH_MANUAL_OUTBASE)/$(1)/$(2): \
		$$(NEMU_PATH_MANUAL_SRC)/$(1)/$(2) \
		$$(NEMU_PATH_MANUAL_SRC)/docbook-refentry-to-manpage-preprocessing.xsl \
		$$(NEMU_XML_CATALOG) $$(NEMU_XML_CATALOG_DOCBOOK) \
		$$(NEMU_VERSION_STAMP) | $$$$(dir $$$$@)
	$$(call MSG_TOOL,xsltproc $$(notdir $$(firstword $$(filter %.xsl,$$^))),,$$(firstword $$(filter %.xml,$$^)),$$@)
	$$(QUIET)$$(RM) -f "$$@"
	$$(QUIET)$$(NEMU_XSLTPROC_WITH_CAT) --output $$@ \
		$$(NEMU_PATH_MANUAL_SRC)/docbook-refentry-to-manpage-preprocessing.xsl $$<
if defined(NEMU_HAVE_XMLLINT) && "$(USER)" == "bird" # Effing stuff happends on build servers, probably kmk related...
	$$(NEMU_XMLLINT_WITH_CAT) --dtdvalid $$(NEMU_PATH_DOCBOOK_DTD)/docbookx.dtd $$@
endif

$$(NEMU_PATH_MANUAL_OUTBASE)/$(1)/$(patsubst man_%,%.1,$(basename $(2))): \
		$$(NEMU_PATH_MANUAL_OUTBASE)/$(1)/$(2) \
		$$(NEMU_PATH_MANUAL_OUTBASE)/docbook-refentry-to-manpage.xsl \
		$$(NEMU_XML_CATALOG) $$(NEMU_XML_CATALOG_DOCBOOK) \
		$$(NEMU_VERSION_STAMP) | $$$$(dir $$$$@)
	$$(call MSG_TOOL,xsltproc $$(notdir $$(firstword $$(filter %.xsl,$$^))),,$$(firstword $$(filter %.xml,$$^)),$$@)
	$$(QUIET)$$(RM) -f "$$@"
	$$(QUIET)$$(NEMU_XSLTPROC_WITH_CAT) --output $$@ $$(NEMU_PATH_MANUAL_OUTBASE)/docbook-refentry-to-manpage.xsl $$<
endef
$(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(foreach file,$(NEMU_MANUAL_XML_REFENTRY_FILES) \
, $(evalcall2 def_nemu_refentry_to_manpage,$(lang),$(file))))


# Handy aliases.
validate-manpages:: $(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(NEMU_MANUAL_XML_REFENTRY_FILES))
man-experiment:: $(foreach lang,$(NEMU_MANUAL_LANGUAGES),$(foreach file,$(NEMU_MANUAL_XML_REFENTRY_FILES) \
			,$$(NEMU_PATH_MANUAL_OUTBASE)/$(lang)/$(patsubst man_%,%.1,$(basename $(file)))))


#
# NemuManage built-in help.
#
# Note! Generating the stuff here is a bit annoying, but currently the most
#       practical way I can come up with.
#
OTHERS += \
	$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.cpp \
	$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.h
OTHER_CLEAN += \
	$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.cpp \
	$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.cpp.ts \
	$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.h \
	$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.h.ts
help-experiment:: \
	$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.cpp \
	$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.h

$(evalcall2 def_nemu_replace_paths_in_xslt,docbook-refentry-to-C-help.xsl,)
$(evalcall2 def_nemu_replace_paths_in_xslt,docbook-refentry-to-H-help.xsl,)

$(NEMU_PATH_MANUAL_OUTBASE)/docbook-refentry-to-C-help.xsl: $(NEMU_PATH_MANUAL_SRC)/common-formatcfg.xsl # manual dependency.

$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.cpp.ts \
+| $(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.cpp: \
		$(NEMU_PATH_MANUAL_OUTBASE)/docbook-refentry-to-C-help.xsl \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(filter man_NemuManage-%,$(NEMU_MANUAL_XML_REFENTRY_FILES))) \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) $(MAKEFILE) | $$(dir $$@)
	$(call MSG_TOOL,xsltproc $(notdir $(firstword $(filter %.xsl,$^))),,$(filter %.xml,$^),$(patsubst %.ts,%,$@))
	$(QUIET)$(APPEND) -tn "$@" \
		'/* Autogenerated by $<, do not edit! */' \
		'' \
		'#include <iprt/types.h>' \
		'#include "NemuManageBuiltInHelp.h"' \
		''
	$(foreach refentry,$(filter %.xml,$^) \
	,$(NLTAB)$(QUIET)$(REDIRECT) -a+to "$@" -- $(NEMU_XSLTPROC_WITH_CAT) $< $(refentry))
	$(QUIET)$(APPEND) -n "$@" \
       	'' \
		'PCREFENTRY     g_apHelpEntries[] = ' \
		'{'
	$(foreach refentry,$(filter %.xml,$^) \
		,$(NLTAB)$(QUIET)$(APPEND) -n "$@" \
		'    &g_$(subst -,_,$(tolower $(patsubst man_%,%,$(notdir $(basename $(refentry)))))), ')
	$(QUIET)$(APPEND) -n "$@" \
		'};' \
		'const uint32_t g_cHelpEntries = RT_ELEMENTS(g_apHelpEntries);' \
               ''
	$(QUIET)$(CP) --changed -- "$@" "$(patsubst %.ts,%,$@)"
# The above APPEND stuff trigger some kind of problem on some boxes when not split up...
# update: Fixed in SVN (strcpy -> memmove in new_job(), job.c - r2591). Just need to rebuild all platforms.

$(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.h.ts \
+| $(NEMU_PATH_MANUAL_OUTBASE)/NemuManageBuiltInHelp.h: \
		$(NEMU_PATH_MANUAL_OUTBASE)/docbook-refentry-to-H-help.xsl \
		$(addprefix $(NEMU_PATH_MANUAL_OUTBASE)/en_US/,$(filter man_NemuManage-%,$(NEMU_MANUAL_XML_REFENTRY_FILES))) \
		$(NEMU_XML_CATALOG) $(NEMU_XML_CATALOG_DOCBOOK) $(MAKEFILE) | $$(dir $$@)
	$(call MSG_TOOL,xsltproc $(notdir $(firstword $(filter %.xsl,$^))),,$(filter %.xml,$^),$(patsubst %.ts,%,$@))
	$(QUIET)$(APPEND) -tn "$@" \
		'/* Autogenerated by $<, do not edit! */' \
               '' \
               '#ifndef ___NemuManageBuiltInHelp_h___' \
               '#define ___NemuManageBuiltInHelp_h___' \
               '' \
               '#include <Nemu/refentry.h>' \
               '' \
               'RT_C_DECLS_BEGIN' \
               '' \
               'typedef enum HELP_CMD_NEMUMANAGE' \
               '{' \
               '    HELP_CMD_NEMUMANAGE_INVALID = 0,'
	$(foreach refentry,$(filter %.xml,$^) \
	,$(NLTAB)$(QUIET)$(REDIRECT) -a+to "$@" -- $(NEMU_XSLTPROC_WITH_CAT) \
		--stringparam 'g_sMode' 'cmd' $< $(refentry))
	$(QUIET)$(APPEND) -n "$@" \
		'    HELP_CMD_NEMUMANAGE_END' \
		'} HELP_CMD_NEMUMANAGE;'
	$(foreach refentry,$(filter %.xml,$^) \
	,$(NLTAB)$(QUIET)$(REDIRECT) -a+to "$@" -- $(NEMU_XSLTPROC_WITH_CAT) \
		--stringparam 'g_sMode' 'subcmd' $< $(refentry))
	$(QUIET)$(APPEND) -n "$@" \
		'' \
		'extern PCREFENTRY     g_apHelpEntries[];' \
		'extern const uint32_t g_cHelpEntries;' \
		'' \
               'RT_C_DECLS_END' \
		'' \
		'#endif' \
               ''
	$(QUIET)$(CP) --changed -- "$@" "$(patsubst %.ts,%,$@)"


include $(FILE_KBUILD_SUB_FOOTER)

