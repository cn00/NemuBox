# $Id: Makefile.kmk $
## @file
# Sub-makefile for NemuDTrace.
#
# Contributed by: bird
#

#
# Copyright (C) 2012-2015 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the Common
# Development and Distribution License Version 1.0 (CDDL) only, as it
# comes in the "COPYING.CDDL" file of the VirtualBox OSE distribution.
# VirtualBox OSE is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../../
include $(KBUILD_PATH)/subheader.kmk


#
# Globals.
#
NEMU_EXTPACK_NEMUDTRACE_NAME         := Oracle NemuDTrace Extension Pack
NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME := Oracle_NemuDTrace_Extension_Pack
NEMU_PATH_EXTPACK_NEMUDTRACE = $(PATH_STAGE)/$(INST_EXTPACK)$(NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME)
INST_EXTPACK_NEMUDTRACE = $(INST_EXTPACK)$(NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME)/

NEMUDT_PATH                := $(PATH_ROOT)/src/Nemu/ExtPacks/NemuDTrace
NEMUDT_PATH_ONNV           := $(NEMUDT_PATH)/onnv
NEMUDT_PATH_UTS            := $(NEMUDT_PATH_ONNV)/uts
NEMUDT_PATH_CMD            := $(NEMUDT_PATH_ONNV)/cmd
NEMUDT_PATH_LIBCTF         := $(NEMUDT_PATH_ONNV)/lib/libctf
NEMUDT_PATH_CMN_CTF        := $(NEMUDT_PATH_ONNV)/common/ctf
NEMUDT_PATH_LIBDTRACE      := $(NEMUDT_PATH_ONNV)/lib/libdtrace
NEMUDT_PATH_CMN_DTRACE     := $(NEMUDT_PATH_ONNV)/common/dtrace


ifndef NEMU_ONLY_EXTPACKS
 #
 # The generic wrapper that selects native or extpack dtrace cmd and adds our
 # library path to the command line.
 #
 # Note! This is not installed as part of the extension pack, but always shipped
 #       with the base Nemu installation.
 #
 PROGRAMS += NemuDTrace
 NemuDTrace_TEMPLATE := NEMUR3EXE
 NemuDTrace_SOURCES := NemuDTraceWrapper.cpp
 NemuDTrace_LIBS = $(LIB_RUNTIME)
 $(call NEMU_SET_VER_INFO_DLL,NemuDTrace,VirtualBox DTrace Chooser)
endif


if defined(NEMU_WITH_EXTPACK_NEMUDTRACE) && defined(NEMU_WITH_EXTPACK)

 #
 # Extend the extension pack templates.
 #
 TEMPLATE_NemuR3ExtPackDTrace = For the ring-3 context modules in the NemuDTrace extension pack.
 TEMPLATE_NemuR3ExtPackDTrace_EXTENDS = NemuR3ExtPack
 TEMPLATE_NemuR3ExtPackDTrace_INST = $(INST_EXTPACK_NEMUDTRACE)$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/
 TEMPLATE_NemuR3ExtPackDTrace_DEFS = $(TEMPLATE_NemuR3ExtPack_DEFS) NEMU_IN_DTRACE_EXTPACK

 TEMPLATE_NemuR0ExtPackDTrace = For the ring-0 context modules in the NemuDTrace extension pack.
 TEMPLATE_NemuR0ExtPackDTrace_EXTENDS = NemuR0ExtPack
 TEMPLATE_NemuR0ExtPackDTrace_INST = $(INST_EXTPACK_NEMUDTRACE)$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)/
 TEMPLATE_NemuR0ExtPackDTrace_DEFS = $(TEMPLATE_NemuR0ExtPack_DEFS) NEMU_IN_DTRACE_EXTPACK

 TEMPLATE_NemuInsExtPackDTrace = For the install targets for the NemuDTrace extension pack.
 TEMPLATE_NemuInsExtPackDTrace_EXTENDS = NemuR0ExtPack
 TEMPLATE_NemuInsExtPackDTrace_INST = $(INST_EXTPACK_NEMUDTRACE)


 #
 # Install the description.
 #
 INSTALLS += NemuDTraceIns
 NemuDTraceIns_TEMPLATE = NemuInsExtPackDTrace
 NemuDTraceIns_SOURCES = \
 	$(NemuDTraceIns_0_OUTDIR)/ExtPack.xml \
 	COPYING=>ExtPack-SourceCodeLicense.txt
 $(call NEMU_EDIT_VERSION_RULE_FN,NemuDTraceIns,ExtPack.xml)


 #
 # NemuDTraceMain - The module which the VirtualBox Main API talks to.
 #
 DLLS += NemuDTraceMain
 NemuDTraceMain_TEMPLATE = NemuR3ExtPackDTrace
 NemuDTraceMain_SOURCES = NemuDTraceMain.cpp
 $(call NEMU_SET_VER_INFO_DLL,NemuDTraceMain,NemuDTrace Main module)


 #
 # The ring-3 NemuDTrace command implementation (library).
 #
 ifneq ($(KBUILD_TARGET),solaris) # Temporarily disabled on Solaris (not really needed)...
 DLLS += NemuDTraceCmd
 NemuDTraceCmd_TEMPLATE = NemuR3ExtPackDTrace
 NemuDTraceCmd_DEFS = RTMEM_WRAP_TO_EF_APIS
 #NemuDTraceCmd_DEFS += YYDEBUG
 NemuDTraceCmd_DEFS.linux = _XOPEN_SOURCE=700
 NemuDTraceCmd_SDKS = NEMU_ZLIB
 ifn1of ($(KBUILD_TARGET), win)
  NemuDTraceCmd_CFLAGS = -Wno-format $(NEMU_GCC_Wno-overlength-strings) -Wno-sign-compare -Wno-strict-prototypes -Wno-missing-prototypes -Wno-missing-declarations -Wno-shadow
 endif
 NemuDTraceCmd_INCS = \
 	include \
 	$(NEMUDT_PATH_UTS)/common \
 	$(NEMUDT_PATH_LIBCTF)/common \
 	$(NEMUDT_PATH_LIBDTRACE)/common \
 	$(NEMUDT_PATH_CMN_CTF)
 NemuDTraceCmd_SOURCES = \
 	$(NEMUDT_PATH_CMD)/dtrace/dtrace.c \
 	\
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_as.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_aggregate.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_buf.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_cc.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_cg.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_consume.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_decl.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_dis.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_dof.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_error.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_handle.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_ident.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_inttab.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_list.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_map.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_module.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_program.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_open.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_options.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_parser.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_pcb.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_pragma.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_printf.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_proc.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_provider.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_regset.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_string.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_strtab.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_subr.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_work.c \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_xlator.c \
 	\
 	$(NemuDTraceCmd_0_OUTDIR)/dt_errtags.c \
 	$(NemuDTraceCmd_0_OUTDIR)/dt_names.c \
 	\
 	$(NEMUDT_PATH_CMN_CTF)/ctf_create.c \
 	$(NEMUDT_PATH_CMN_CTF)/ctf_error.c \
 	$(NEMUDT_PATH_CMN_CTF)/ctf_decl.c \
 	$(NEMUDT_PATH_CMN_CTF)/ctf_hash.c \
 	$(NEMUDT_PATH_CMN_CTF)/ctf_labels.c \
 	$(NEMUDT_PATH_CMN_CTF)/ctf_lookup.c \
 	$(NEMUDT_PATH_CMN_CTF)/ctf_open.c \
 	$(NEMUDT_PATH_CMN_CTF)/ctf_types.c \
 	$(NEMUDT_PATH_CMN_CTF)/ctf_util.c \
 	\
 	$(NEMUDT_PATH_LIBCTF)/common/ctf_subr.c \
 	$(NEMUDT_PATH_LIBCTF)/common/ctf_lib.c

 # Source not used or wanted:
 #	$(NEMUDT_PATH_LIBDTRACE)/common/dt_link.c
 #	$(NEMUDT_PATH_LIBDTRACE)/common/dt_pid.c

 # Generate sources
 $$(NemuDTraceCmd_0_OUTDIR)/dt_errtags.c: \
 		$(NEMUDT_PATH_LIBDTRACE)/common/dt_errtags.h \
 		$(NEMUDT_PATH_LIBDTRACE)/common/mkerrtags.sed \
 		| $$(dir $$@)
	$(MSG_GENERATE,NemuDTraceCmd,$@,$<)
	$(SED) -n -f $(NEMUDT_PATH_LIBDTRACE)/common/mkerrtags.sed --output $@ $<

 $$(NemuDTraceCmd_0_OUTDIR)/dt_names.c: \
 		$(NEMUDT_PATH_UTS)/common/sys/dtrace.h \
 		$(NEMUDT_PATH_LIBDTRACE)/common/mknames.sed \
 		| $$(dir $$@)
	$(MSG_GENERATE,NemuDTraceCmd,$@,$<)
	$(SED) -n -f $(NEMUDT_PATH_LIBDTRACE)/common/mknames.sed --output $@ $<

 ifdef NEMU_HAVE_BISON
  USES                   += yacc
  NemuDTraceCmd_USES     += yacc
  NemuDTraceCmd_YACCTOOL  = BISON
  NemuDTraceCmd_YACCFLAGS = -d -y
  NemuDTraceCmd_SOURCES  += \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_grammar.y
  NemuDTraceCmd_INCS     += $(NemuDTraceCmd_0_OUTDIR)/src/Nemu/ExtPacks/NemuDTrace/onnv/lib/libdtrace/common
 else
  NemuDTraceCmd_SOURCES  += \
 	$(NEMUDT_PATH)/generated/dt_grammar.c
  NemuDTraceCmd_INCS     += \
 	$(NEMUDT_PATH)/generated/
 endif

 ifdef NEMU_HAVE_FLEX
  USES                   += lex
  NemuDTraceCmd_USES     += lex
  NemuDTraceCmd_LEXTOOL   = FLEX
  NemuDTraceCmd_LEXFLAGS  = -l -B #-d -T
  NemuDTraceCmd_SOURCES  += \
 	$(NEMUDT_PATH_LIBDTRACE)/common/dt_lex.l
 else
  NemuDTraceCmd_SOURCES  += \
 	$(NEMUDT_PATH)/generated/dt_lex.c
 endif
 NemuDTraceCmd_DEFS      += USING_FLEX
 $(call NEMU_SET_VER_INFO_DLL,NemuDTraceCmd,NemuDTrace Command Implementation)

 #
 # Updates the sources generated by flex and biosn.
 # The SED processing removes the paths the from #line statements.
 #
 nemudtrace-update-generated-sources: \
 		$$(NemuDTraceCmd_0_OUTDIR)/src/Nemu/ExtPacks/NemuDTrace/onnv/lib/libdtrace/common/dt_grammar.c \
 		$$(NemuDTraceCmd_0_OUTDIR)/src/Nemu/ExtPacks/NemuDTrace/onnv/lib/libdtrace/common/dt_grammar.h \
 		$$(NemuDTraceCmd_0_OUTDIR)/src/Nemu/ExtPacks/NemuDTrace/onnv/lib/libdtrace/common/dt_lex.c
	$(foreach file,dt_grammar.c dt_grammar.h dt_lex.c \
		,$(NLTAB)$(SED)  -e 's,$(NEMUDT_PATH_LIBDTRACE)/common/,,g'\
 		-e 's,$(NemuDTraceCmd_0_OUTDIR)/src/Nemu/ExtPacks/NemuDTrace/onnv/lib/libdtrace/common/,,g' \
 		--output $(NEMUDT_PATH)/generated/$(file) \
 		$(NemuDTraceCmd_0_OUTDIR)/src/Nemu/ExtPacks/NemuDTrace/onnv/lib/libdtrace/common/$(file))
 endif # Temporarily disabled on Solaris.

 #
 # The ring-0 part of NemuDTrace.
 #
 ifneq ($(KBUILD_TARGET),solaris) # disabled on solaris - neiter needed nor currently able to build it here.
  SYSMODS += NemuDTraceR0
 endif
 NemuDTraceR0_TEMPLATE = NemuR0ExtPackDTrace
 NemuDTraceR0_DEFS = IN_NEMUDTRACE_R0 IN_RT_R0
 ifeq ($(NEMU_LDR_FMT),elf)
  NemuDTraceR0_LDFLAGS = -e ModuleInit
 endif
 NemuDTraceR0_INCS = \
 	include \
 	$(NEMUDT_PATH_UTS)/common
 NemuDTraceR0_SOURCES = \
 	NemuDTraceR0.cpp \
 	NemuDTraceR0A.asm \
 	$(NEMUDT_PATH_UTS)/common/dtrace/dtrace.c
 NemuDTraceR0_LIBS = \
 	$(PATH_STAGE_LIB)/RuntimeR0$(NEMU_SUFF_LIB)
 ifneq ($(filter pe lx,$(NEMU_LDR_FMT)),)
  NemuDTraceR0_LIBS += \
  	$(PATH_STAGE_LIB)/SUPR0$(NEMU_SUFF_LIB)
 endif
 $(call NEMU_SET_VER_INFO_R0,NemuDTraceR0,NemuDTrace Core (ring-0))


 #
 # Packing.
 #
 ifndef NEMU_WITHOUT_EXTPACK_NEMUDTRACE_PACKING
  PACKING += $(NEMU_PATH_PACKAGES)/$(NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME)-$(NEMU_VERSION_STRING)r$(NEMU_SVN_REV).nemu-extpack
 endif

 ifndef NEMU_WITH_EXTPACK_OS_ARCHS
  ifeq ($(USER),bird) # for now
   NEMU_WITH_EXTPACK_OS_ARCHS = $(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)
  endif
 endif

 # Build the file list.  The macro takes 1=darwin.x86, 2=dist/VirtualBox.app/Contents/MacOS, 3=dylib
 NEMU_NEMUDTRACE_FILES_MACRO = \
 	$(PATH_OUT_BASE)/$(1)/$(KBUILD_TYPE)/$(2)/ExtensionPacks/$(NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME)/$(1)/NemuDTraceMain.$(3)=>$(1)/NemuDTraceMain.$(3) \
       $(if $(intersects $1, solaris.x86 solaris.amd64),, \
 	 $(PATH_OUT_BASE)/$(1)/$(KBUILD_TYPE)/$(2)/ExtensionPacks/$(NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME)/$(1)/NemuDTraceCmd.$(3)=>$(1)/NemuDTraceCmd.$(3) \
 	 $(PATH_OUT_BASE)/$(1)/$(KBUILD_TYPE)/$(2)/ExtensionPacks/$(NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME)/$(1)/NemuDTraceR0.r0=>$(1)/NemuDTraceR0.r0 \
       )

 NEMU_NEMUDTRACE_FILES := \
 	$(NEMU_PATH_EXTPACK_NEMUDTRACE)/ExtPack.xml=>ExtPack.xml \
 	$(NEMU_PATH_EXTPACK_NEMUDTRACE)/ExtPack-SourceCodeLicense.txt=>ExtPack-SourceCodeLicense.txt

 if1of (darwin.amd64, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,darwin.amd64,dist/VirtualBox.app/Contents/MacOS,dylib)
 endif
 if1of (darwin.x86, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,darwin.x86,dist/VirtualBox.app/Contents/MacOS,dylib)
 endif
 if1of (freebsd.amd64, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,freebsd.amd64,bin,so)
 endif
 if1of (freebsd.x86, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,freebsd.x86,bin,so)
 endif
 if1of (linux.amd64, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,linux.amd64,bin,so)
 endif
 if1of (linux.x86, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,linux.x86,bin,so)
 endif
 if1of (os2.x86, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,os2.x86,bin,so)
 endif
 if1of (solaris.amd64, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,solaris.amd64,bin,so)
 endif
 if1of (solaris.x86, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,solaris.x86,bin,so)
 endif
 if1of (win.amd64, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,win.amd64,bin,dll)
 endif
 if1of (win.x86, $(NEMU_WITH_EXTPACK_OS_ARCHS))
  NEMU_NEMUDTRACE_FILES += $(call NEMU_NEMUDTRACE_FILES_MACRO,win.x86,bin,dll)
 endif

 # Pack it all up using a temporary staging directory.
 $(NEMU_PATH_PACKAGES)/$(NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME)-$(NEMU_VERSION_STRING)r$(NEMU_SVN_REV).nemu-extpack: \
 		$$(foreach file, $$(NEMU_NEMUDTRACE_FILES), $$(firstword $$(subst =>,$$(SP),$$(file)))) \
 		| $(NEMU_PATH_PACKAGES)/
	$(RM) -f $(wildcard $(NEMU_PATH_PACKAGES)/$(NEMU_EXTPACK_NEMUDTRACE_MANGLED_NAME)-*.nemu-extpack) \
		$(NemuDTraceIns_0_OUTDIR)/ExtPack.manifest \
		$(NemuDTraceIns_0_OUTDIR)/ExtPack.signature
 # Stage all the files
	$(RM) -Rf $(NemuDTraceIns_0_OUTDIR)/Stage/
	$(foreach file, $(NEMU_NEMUDTRACE_FILES),\
		$(NLTAB)$(MKDIR) -p $(dir $(lastword $(subst =>,$(SP)$(NemuDTraceIns_0_OUTDIR)/Stage/,$(file)))) \
		$(NLTAB)$(CP) $(subst =>,$(SP)$(NemuDTraceIns_0_OUTDIR)/Stage/,$(file)) )
 # Create the manifest
	$(NEMU_RTMANIFEST) \
		--manifest $(NemuDTraceIns_0_OUTDIR)/Stage/ExtPack.manifest \
		--chdir $(NemuDTraceIns_0_OUTDIR)/Stage/ \
		$(foreach file, $(NEMU_NEMUDTRACE_FILES), $(lastword $(subst =>,$(SP),$(file))))
	$(APPEND) $(NemuDTraceIns_0_OUTDIR)/Stage/ExtPack.signature "todo"
	$(CHMOD) a+r \
		$(NemuDTraceIns_0_OUTDIR)/Stage/ExtPack.manifest \
		$(NemuDTraceIns_0_OUTDIR)/Stage/ExtPack.signature
 # Tar it up.
	tar -cvf - -C $(NemuDTraceIns_0_OUTDIR)/Stage/ . | gzip -9c > $@
 # Clean up
	$(RM) -Rf $(NemuDTraceIns_0_OUTDIR)/Stage/

 BLDDIRS += $(NEMU_PATH_PACKAGES)/

endif # NEMU_WITH_EXTPACK_NEMUDTRACE


include $(FILE_KBUILD_SUB_FOOTER)

