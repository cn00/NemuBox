# $Id: Makefile.kmk $
## @file
# Sub-Makefile for the VirtualBox Guest/Host OpenGL part
#

#
# Copyright (C) 2008-2015 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#

SUB_DEPTH = ../../../..
include $(KBUILD_PATH)/subheader.kmk


#
# Target lists.
#
BLDDIRS += \
	$(NEMU_PATH_CROGL_GENFILES)/ \
	$(NEMU_PATH_CROGL_GENFILES)/state/

ifdef NEMU_WITH_ADDITIONS
 ifn1of ($(KBUILD_TARGET), darwin os2)
  NEMU_WITH_CROGL_ADDITIONS = 1
 endif
endif

ifdef NEMU_WITH_CROGL_ADDITIONS
 DLLS      += NemuOGLcrutil NemuOGLerrorspu
 LIBRARIES += NemuOGLcrpacker NemuOGLspuload NemuOGLcrstate
endif

ifndef NEMU_ONLY_ADDITIONS
 DLLS      += NemuOGLhostcrutil NemuOGLhosterrorspu
 LIBRARIES += NemuOGLhostcrpacker NemuOGLhostspuload NemuOGLhostcrstate
endif

#
# NemuOGLcrutil
#
NemuOGLcrutil_TEMPLATE      = NEMUCROGLR3GUESTDLL
if defined(NEMU_SIGNING_MODE) && defined(NEMU_WITH_WDDM)
 NemuOGLcrutil_INSTTYPE.win = none
 NemuOGLcrutil_DEBUG_INSTTYPE.win = both
endif
NemuOGLcrutil_SDKS.win      = ReorderCompilerIncs $(NEMU_WINPSDK) $(NEMU_WINDDK)
NemuOGLcrutil_INTERMEDIATES = $(NEMU_PATH_CROGL_GENFILES)/cr_opcodes.h
if1of ($(KBUILD_TARGET), linux solaris freebsd)
 NemuOGLcrutil_INCS += \
	$(NEMU_MESA_INCS)
endif
NemuOGLcrutil_SOURCES       = \
	util/bbox.c \
	util/bufpool.c \
	util/calllists.c \
	util/devnull.c \
	util/dll.c \
	util/endian.c \
	util/environment.c \
	util/error.c \
	util/filenet.c \
	util/hash.c \
	util/hull.c \
	util/list.c \
	util/matrix.c \
	util/mem.c \
	util/net.c \
	util/pixel.c \
	util/process.c \
	util/rand.c \
	util/string.c \
	util/threads.c \
	util/tcpip.c \
	util/udptcpip.c \
	util/timer.c \
	util/url.c \
	util/warp.c \
	util/vreg.cpp \
	util/blitter.cpp \
	util/compositor.cpp \
	util/htable.cpp \
	util/bmpscale.cpp \
	util/nemuhgcm.c \
	$(NEMU_PATH_CROGL_GENFILES)/debug_opcodes.c
NemuOGLcrutil_SOURCES.win = \
	util/NemuOGLcrutil.rc
NemuOGLcrutil_SOURCES.win.x86 = \
	util/util.def
NemuOGLcrutil_LIBS.win = \
	$(PATH_SDK_$(NEMU_WINDDK)_LIB)/ddraw.lib \
	$(PATH_SDK_$(NEMU_WINDDK)_LIB)/dxguid.lib \
	$(PATH_SDK_$(NEMU_WINDDK)_LIB)/shlwapi.lib
NemuOGLcrutil_LIBS = \
	$(NEMU_LIB_IPRT_GUEST_R3_SHARED) \
	$(NEMU_LIB_VBGL_R3_SHARED)

# Needed by GDEbuger
ifdef CR_NO_GL_SYSTEM_PATH
NemuOGLcrutil_DEFS       += CR_NO_GL_SYSTEM_PATH
endif
ifdef NEMU_WITH_CRHGSMI
NemuOGLcrutil_DEFS.win    += NEMU_WITH_CRHGSMI
NemuOGLcrutil_LIBS.win    += $(NEMU_PATH_ADDITIONS_LIB)/NemuCrHgsmi$(NEMU_SUFF_LIB)
endif
ifdef NEMU_WITH_WDDM
NemuOGLcrutil_DEFS.win    += NEMU_WITH_WDDM
NemuOGLcrutil_DEFS.win    += CR_DEBUG_BACKDOOR_ENABLE
NemuOGLcrutil_INCS.win    += $(PATH_ROOT)/src/Nemu/Additions/WINNT/Graphics/Video/disp/wddm
NemuOGLcrutil_LIBS.win    += $(NEMU_PATH_ADDITIONS_LIB)/NemuDispMpLogger$(NEMU_SUFF_LIB)
endif
NemuOGLcrutil_CLEAN = \
	$(NEMU_PATH_CROGL_GENFILES)/debug_opcodes.c
if1of ($(KBUILD_TARGET), linux)
NemuOGLcrutil_LDFLAGS += -Wl,-z,nodelete
endif

# vc7 hangs during compilation of this file when optimizations are enabled.
#NemuOGLcrutil_pixel.c_CFLAGS.win.x86     += -Od
#NemuOGLhostcrutil_pixel.c_CFLAGS.win.x86 += -Od

if defined(NEMU_WITH_WDDM) && defined(NEMU_WITH_CROGL_ADDITIONS)
#
# NemuOGLcrutil-x86 - x86 NemuOGLcrutil version built for amd64 build
#
DLLS.win.amd64 += NemuOGLcrutil-x86
NemuOGLcrutil-x86_TEMPLATE      = NEMUCROGLR3GUESTDLL
NemuOGLcrutil-x86_EXTENDS = NemuOGLcrutil
NemuOGLcrutil-x86_BLD_TRG_ARCH = x86
NemuOGLcrutil-x86_LIBS = $(NEMU_LIB_IPRT_GUEST_R3_SHARED_X86) \
	$(NEMU_LIB_VBGL_R3_SHARED_X86)
NemuOGLcrutil-x86_LIBS.win = \
	$(PATH_SDK_$(NEMU_WINDDK)_LIB.x86)/ddraw.lib \
	$(PATH_SDK_$(NEMU_WINDDK)_LIB.x86)/dxguid.lib
ifdef NEMU_WITH_CRHGSMI
# NEMU_WITH_CRHGSMI define is inherited from NemuOGLcrutil
NemuOGLcrutil-x86_LIBS.win    += $(NEMU_PATH_ADDITIONS_LIB)/NemuCrHgsmi-x86$(NEMU_SUFF_LIB)
endif
NemuOGLcrutil-x86_DEFS = $(NemuOGLcrutil_DEFS) NEMU_WDDM_WOW64
ifdef NEMU_WITH_WDDM
# CR_DEBUG_BACKDOOR_ENABLE define is inherited from NemuOGLcrutil
NemuOGLcrutil-x86_INCS.win    += $(PATH_ROOT)/src/Nemu/Additions/WINNT/Graphics/Video/disp/wddm
NemuOGLcrutil-x86_LIBS.win    += $(NEMU_PATH_ADDITIONS_LIB)/NemuDispMpLogger-x86$(NEMU_SUFF_LIB)
endif
# vc7 hangs during compilation of this file when optimizations are enabled.
#NemuOGLcrutil-x86_pixel.c_CFLAGS += -Od
#NemuOGLcrutil-x86_pixel.c_CFLAGS += -Od
endif

#
# NemuOGLhostcrutil
#
NemuOGLhostcrutil_EXTENDS  = NemuOGLcrutil
NemuOGLhostcrutil_TEMPLATE = NEMUCROGLR3HOSTDLL
if defined(NEMU_SIGNING_MODE) && defined(NEMU_WITH_WDDM)
 NemuOGLhostcrutil_INSTTYPE.win = both
endif
if1of ($(KBUILD_TARGET), linux)
NemuOGLhostcrutil_LDFLAGS = $(NO_SUCH_VARIABLE)
endif
NemuOGLhostcrutil_LDFLAGS.darwin = $(NemuOGLcrutil_LDFLAGS.darwin) \
	-install_name $(NEMU_DYLD_EXECUTABLE_PATH)/NemuOGLhostcrutil.dylib
NemuOGLhostcrutil_LIBS.win =  \
    $(PATH_SDK_$(NEMU_WINDDK)_LIB)/ddraw.lib \
    $(PATH_SDK_$(NEMU_WINDDK)_LIB)/dxguid.lib
NemuOGLhostcrutil_LIBS     = $(LIB_RUNTIME)
ifdef NEMU_WITH_CRHGSMI
NemuOGLhostcrutil_DEFS    += NEMU_WITH_CRHGSMI
endif
ifdef NEMU_WITH_WDDM
NemuOGLhostcrutil_INCS.win = $(NO_SUCH_VARIABLE)
NemuOGLhostcrutil_DEFS.win = $(NO_SUCH_VARIABLE)
endif

#
# Generate files for NemuOGLcrutil and NemuOGLhostcrutil.
#
$(NEMU_PATH_CROGL_GENFILES)/debug_opcodes.c: $(PATH_SUB_CURRENT)/util/debug_opcodes.py $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)

ifdef NEMU_WITH_CRDUMPER
$(NEMU_PATH_CROGL_GENFILES)/dump_gen.cpp: $(PATH_SUB_CURRENT)/state_tracker/dump_gen.py $(PATH_ROOT)/src/Nemu/HostServices/SharedOpenGL/crserverlib/get_sizes.py $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_isenabled.txt state_extensions_isenabled.txt) $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI) $(<D)
endif

#
# NemuOGLcrpacker
#
NemuOGLcrpacker_TEMPLATE = NEMUCROGLR3GUESTLIB
NemuOGLcrpacker_INCS = \
	packer
if1of ($(KBUILD_TARGET), linux solaris freebsd)
 NemuOGLcrpacker_INCS += \
	$(NEMU_MESA_INCS)
endif
NemuOGLcrpacker_INTERMEDIATES = \
	$(NEMU_PATH_CROGL_GENFILES)/cr_packfunctions.h \
	$(NEMU_PATH_CROGL_GENFILES)/cr_opcodes.h \
	$(NEMU_PATH_CROGL_GENFILES)/state/cr_currentpointers.h \
	$(NEMU_PATH_CROGL_GENFILES)/state/cr_statefuncs.h \
	$(NEMU_PATH_CROGL_GENFILES)/spu_dispatch_table.h
NemuOGLcrpacker_SOURCES = \
	packer/pack_arrays.c \
	packer/pack_beginend.c \
	packer/pack_bounds.c \
	packer/pack_buffer.c \
	packer/pack_bufferobject.c \
	packer/pack_client.c \
	packer/pack_clipplane.c \
	packer/pack_context.c \
	packer/pack_error.c \
	packer/pack_extensions.c \
	packer/pack_feedback.c \
	packer/pack_fence.c \
	packer/pack_fog.c \
	packer/pack_init.c \
	packer/pack_lights.c \
	packer/pack_lists.c \
	packer/pack_swap_lists.c \
	packer/pack_map.c \
	packer/pack_point.c \
	packer/pack_swap_map.c \
	packer/pack_misc.c \
	packer/pack_materials.c \
	packer/pack_matrices.c \
	packer/pack_pixels.c \
	packer/pack_pixelmap.c \
	packer/pack_swap_pixelmap.c \
	packer/pack_program.c \
	packer/pack_regcombiner.c \
	packer/pack_stipple.c \
	packer/pack_texture.c \
	packer/pack_swap_texture.c \
	packer/pack_visibleregion.c \
	packer/pack_shaders.c \
	packer/pack_framebuffer.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_arrays_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_bounds_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_bufferobject_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_client_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_clipplane_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_fog_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_lights_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_materials_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_matrices_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_misc_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_pixels_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_point_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_program_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_regcombiner_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_stipple_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_bbox.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_current.c \
	$(NEMU_PATH_CROGL_GENFILES)/packer.c
NemuOGLcrpacker_CLEAN = \
	$(NEMU_PATH_CROGL_GENFILES)/pack_arrays_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_bounds_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_bufferobject_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_client_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_clipplane_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_fog_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_lights_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_materials_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_matrices_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_misc_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_pixels_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_point_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_program_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_regcombiner_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_stipple_swap.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_bbox.c \
	$(NEMU_PATH_CROGL_GENFILES)/pack_current.c \
	$(NEMU_PATH_CROGL_GENFILES)/packer.c \
	$(NEMU_PATH_CROGL_GENFILES)/cr_packfunctions.h \
	$(NEMU_PATH_CROGL_GENFILES)/cr_opcodes.h \
	$(NEMU_PATH_CROGL_GENFILES)/state/cr_currentpointers.h
ifdef NEMU_WITH_CRHGSMI
NemuOGLcrpacker_DEFS.win    += NEMU_WITH_CRHGSMI
endif
ifdef NEMU_WITH_WDDM
NemuOGLcrpacker_DEFS.win   += NEMU_WITH_WDDM
endif

if defined(NEMU_WITH_WDDM) && defined(NEMU_WITH_CROGL_ADDITIONS)
#
# NemuOGLcrpacker-x86 - x86 NemuOGLcrpacker version built for amd64 build
#
LIBRARIES.win.amd64 += NemuOGLcrpacker-x86
NemuOGLcrpacker-x86_TEMPLATE = NEMUCROGLR3GUESTLIB
NemuOGLcrpacker-x86_EXTENDS = NemuOGLcrpacker
NemuOGLcrpacker-x86_BLD_TRG_ARCH = x86
NemuOGLcrpacker-x86_DEFS = $(NemuOGLcrpacker_DEFS) NEMU_WDDM_WOW64
endif

#
# NemuOGLhostcrpacker
#
NemuOGLhostcrpacker_EXTENDS  = NemuOGLcrpacker
NemuOGLhostcrpacker_TEMPLATE = NEMUCROGLR3HOSTLIB

#
# Generate files for NemuOGLcrpacker and NemuOGLhostcrpacker.
#
$(NEMU_PATH_CROGL_GENFILES)/packer.def: $(PATH_SUB_CURRENT)/packer/packer_defs.py $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)

$(NEMU_PATH_CROGL_GENFILES)/cr_packfunctions.h: $(PATH_SUB_CURRENT)/packer/pack_header.py $(PATH_SUB_CURRENT)/packer/packer_special $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI) $(<D)

$(NEMU_PATH_CROGL_GENFILES)/cr_opcodes.h: $(PATH_SUB_CURRENT)/packer/opcodes.py $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)

$(NEMU_PATH_CROGL_GENFILES)/state/cr_currentpointers.h: $(PATH_SUB_CURRENT)/packer/pack_currentheader.py $(PATH_SUB_CURRENT)/packer/pack_currenttypes.py | $$(dir $(NEMU_PATH_CROGL_GENFILES)) $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $<

$(NEMU_PATH_CROGL_GENFILES)/packer.c: $(PATH_SUB_CURRENT)/packer/packer.py $(PATH_SUB_CURRENT)/packer/packer_special $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI) $(<D)

$(NEMU_PATH_CROGL_GENFILES)/pack_bbox.c: $(PATH_SUB_CURRENT)/packer/packer_bbox.py | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)

$(NEMU_PATH_CROGL_GENFILES)/pack_current.c: $(PATH_SUB_CURRENT)/packer/pack_current.py $(PATH_SUB_CURRENT)/packer/pack_currenttypes.py | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $<

$(NEMU_PATH_CROGL_GENFILES)/%_swap.c: $(PATH_SUB_CURRENT)/packer/%.c $(PATH_SUB_CURRENT)/packer/pack_swap.py | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/pack_swap.py $<


#
# NemuOGLspuload
#
NemuOGLspuload_TEMPLATE = NEMUCROGLR3GUESTLIB
NemuOGLspuload_INTERMEDIATES = \
	$(NEMU_PATH_CROGL_GENFILES)/spu_dispatch_table.h
if1of ($(KBUILD_TARGET), linux solaris freebsd)
 NemuOGLspuload_INCS += \
	$(NEMU_MESA_INCS)
endif
NemuOGLspuload_SOURCES = \
	spu_loader/spuinit.c \
	spu_loader/spuload.c \
	spu_loader/choosevisual.c \
	$(NEMU_PATH_CROGL_GENFILES)/spuchange.c \
	$(NEMU_PATH_CROGL_GENFILES)/spucopy.c \
	$(NEMU_PATH_CROGL_GENFILES)/dispatch.c \
	$(NEMU_PATH_CROGL_GENFILES)/glloader.c
NemuOGLspuload_CLEAN = \
	$(NEMU_PATH_CROGL_GENFILES)/spuchange.c \
	$(NEMU_PATH_CROGL_GENFILES)/spucopy.c \
	$(NEMU_PATH_CROGL_GENFILES)/dispatch.c \
	$(NEMU_PATH_CROGL_GENFILES)/glloader.c \
	$(NEMU_PATH_CROGL_GENFILES)/spu_dispatch_table.h
ifdef NEMU_WITH_CRHGSMI
NemuOGLspuload_DEFS.win    += NEMU_WITH_CRHGSMI
endif
ifdef NEMU_WITH_WDDM
NemuOGLspuload_DEFS.win   += NEMU_WITH_WDDM
endif

if defined(NEMU_WITH_WDDM) && defined(NEMU_WITH_CROGL_ADDITIONS)
#
# NemuOGLspuload-x86 - x86 NemuOGLspuload version built for amd64 build
#
LIBRARIES.win.amd64 += NemuOGLspuload-x86
NemuOGLspuload-x86_TEMPLATE = NEMUCROGLR3GUESTLIB
NemuOGLspuload-x86_EXTENDS = NemuOGLspuload
NemuOGLspuload-x86_BLD_TRG_ARCH = x86
NemuOGLspuload-x86_DEFS = $(NemuOGLspuload_DEFS) NEMU_WDDM_WOW64
endif


#
# NemuOGLhostspuload
#
NemuOGLhostspuload_EXTENDS  = NemuOGLspuload
NemuOGLhostspuload_TEMPLATE = NEMUCROGLR3HOSTLIB

#
# Generate files for NemuOGLspuload and NemuOGLhostspuload.
#
$(NEMU_PATH_CROGL_GENFILES)/dispatch.c: $(PATH_SUB_CURRENT)/spu_loader/dispatch.py $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)

$(NEMU_PATH_CROGL_GENFILES)/spucopy.c: $(PATH_SUB_CURRENT)/spu_loader/spucopy.py $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)

$(NEMU_PATH_CROGL_GENFILES)/spuchange.c: $(PATH_SUB_CURRENT)/spu_loader/spuchange.py $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)

$(NEMU_PATH_CROGL_GENFILES)/glloader.c: $(PATH_SUB_CURRENT)/spu_loader/glloader.py $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)

$(NEMU_PATH_CROGL_GENFILES)/spu_dispatch_table.h: $(PATH_SUB_CURRENT)/spu_loader/dispatchheader.py $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)


#
# NemuOGLcrstate
#
NemuOGLcrstate_TEMPLATE = NEMUCROGLR3GUESTLIB
NemuOGLcrstate_INCS = \
	state_tracker
if1of ($(KBUILD_TARGET), linux solaris freebsd)
 NemuOGLcrstate_INCS += \
	$(NEMU_MESA_INCS)
endif
NemuOGLcrstate_INTERMEDIATES = \
	$(NEMU_PATH_CROGL_GENFILES)/state/cr_statefuncs.h \
	$(NEMU_PATH_CROGL_GENFILES)/state/cr_currentpointers.h \
	$(NEMU_PATH_CROGL_GENFILES)/spu_dispatch_table.h
NemuOGLcrstate_SOURCES = \
	state_tracker/state_attrib.c \
	state_tracker/state_buffer.c \
	state_tracker/state_bufferobject.c \
	state_tracker/state_client.c \
	state_tracker/state_current.c \
	state_tracker/state_diff.c \
	state_tracker/state_enable.c \
	state_tracker/state_error.c \
	state_tracker/state_evaluators.c \
	state_tracker/state_feedback.c \
	state_tracker/state_fence.c \
	state_tracker/state_flush.c \
	state_tracker/state_fog.c \
	state_tracker/state_getstring.c \
	state_tracker/state_hint.c \
	state_tracker/state_init.c \
	state_tracker/state_lighting.c \
	state_tracker/state_limits.c \
	state_tracker/state_line.c \
	state_tracker/state_lists.c \
	state_tracker/state_multisample.c \
	state_tracker/state_occlude.c \
	state_tracker/state_pixel.c \
	state_tracker/state_point.c \
	state_tracker/state_polygon.c \
	state_tracker/state_program.c \
	state_tracker/state_rasterpos.c \
	state_tracker/state_regcombiner.c \
	state_tracker/state_stencil.c \
	state_tracker/state_texture.c \
	state_tracker/state_teximage.c \
	state_tracker/state_texdiff.c \
	state_tracker/state_transform.c \
	state_tracker/state_viewport.c \
	state_tracker/state_framebuffer.c \
	state_tracker/state_glsl.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_buffer_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_current_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_fog_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_hint_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_lighting_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_line_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_multisample_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_polygon_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_regcombiner_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_viewport_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_get.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_isenabled.c
ifdef NEMU_WITH_CRDUMPER
NemuOGLcrstate_SOURCES += state_tracker/dump.cpp \
	$(NEMU_PATH_CROGL_GENFILES)/dump_gen.cpp
endif

NemuOGLcrstate_CLEAN = \
	$(NEMU_PATH_CROGL_GENFILES)/state_buffer_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_current_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_fog_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_hint_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_lighting_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_line_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_multisample_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_polygon_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_regcombiner_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_viewport_gen.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_get.c \
	$(NEMU_PATH_CROGL_GENFILES)/state_isenabled.c \
	$(NEMU_PATH_CROGL_GENFILES)/state/cr_statefuncs.h
ifdef NEMU_WITH_CRDUMPER
NemuOGLcrstate_CLEAN += $(NEMU_PATH_CROGL_GENFILES)/dump_gen.cpp
endif

ifneq ($(KBUILD_TARGET),win)
 ifeq ($(NEMU_WITH_COMPATIBLE_LINUX_GUEST_PACKAGE),)
state_tracker/state_lists.c_CFLAGS += $(NEMU_GCC_Wno-pointer-sign)
NemuOGLcrstate_CFLAGS +=
 endif
endif
ifdef NEMU_WITH_CRHGSMI
NemuOGLcrstate_DEFS.win    += NEMU_WITH_CRHGSMI
endif
ifdef NEMU_WITH_WDDM
NemuOGLcrstate_DEFS.win   += NEMU_WITH_WDDM
endif
ifdef NEMU_WITH_CRDUMPER
NemuOGLcrstate_DEFS        += NEMU_WITH_CRDUMPER
#NemuOGLcrutil_LIBS        += \
    $(PATH_STAGE_LIB)/additions/NemuOGLcrstate$(NEMU_SUFF_LIB) \
    $(PATH_STAGE_LIB)/additions/NemuOGLspuload$(NEMU_SUFF_LIB)
endif

if defined(NEMU_WITH_WDDM) && defined(NEMU_WITH_CROGL_ADDITIONS)
#
# NemuOGLcrstate-x86 - x86 NemuOGLcrstate version built for amd64 build
#
LIBRARIES.win.amd64 += NemuOGLcrstate-x86
NemuOGLcrstate-x86_TEMPLATE = NEMUCROGLR3GUESTLIB
NemuOGLcrstate-x86_EXTENDS = NemuOGLcrstate
NemuOGLcrstate-x86_BLD_TRG_ARCH = x86
NemuOGLcrstate-x86_DEFS = $(NemuOGLcrstate_DEFS) NEMU_WDDM_WOW64
endif


#
# NemuOGLhostcrstate
#
NemuOGLhostcrstate_EXTENDS  = NemuOGLcrstate
NemuOGLhostcrstate_TEMPLATE = NEMUCROGLR3HOSTLIB
NemuOGLhostcrstate_SOURCES  = \
	$(NemuOGLcrstate_SOURCES) \
	state_tracker/state_snapshot.c

#
# Generate files for NemuOGLcrstate and NemuOGLhostcrstate.
#


$(NEMU_PATH_CROGL_GENFILES)/state_buffer_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_buffer.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py buffer Buffer $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_client_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_client.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py client Client $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_current_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_current.py convert.py) $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/state_current.py

$(NEMU_PATH_CROGL_GENFILES)/state_fog_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_fog.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py fog Fog $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_hint_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_hint.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py hint Hint $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_lighting_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_lighting.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py lighting Lighting $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_line_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_line.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py line Line $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_multisample_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_multisample.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py multisample Multisample $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_polygon_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_polygon.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py polygon Polygon $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_regcombiner_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_regcombiner.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py regcombiner RegCombiner $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_viewport_gen.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_viewport.txt gendiffcode.py) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/gendiffcode.py viewport Viewport $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_get.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_get.py state_get.txt state_extensions_get.txt get_components.py) $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/state_get.py $(NEMU_PATH_CROGL_GLAPI) $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state_isenabled.c: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_isenabled.py state_isenabled.txt state_extensions_isenabled.txt) $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/state_isenabled.py $(NEMU_PATH_CROGL_GLAPI) $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state.def: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_defs.py state_special state_select_special state_feedback_special) $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/state_defs.py $(NEMU_PATH_CROGL_GLAPI) $(<D)

$(NEMU_PATH_CROGL_GENFILES)/state/cr_statefuncs.h: $(addprefix $(PATH_SUB_CURRENT)/state_tracker/, state_funcs.py state_special state_feedback_special state_select_special) $(NEMU_CROGL_API_FILES) | $$(dir $$@)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $(<D)/state_funcs.py $(NEMU_PATH_CROGL_GLAPI) $(<D)


#
# NemuOGLerrorspu
# @remark See HostServices/OpenGL/Makefile for and explanation of the gl.h
#         and glu.h intermediate files on darwin.
#
NemuOGLerrorspu_TEMPLATE = NEMUCROGLR3GUESTDLL
if defined(NEMU_SIGNING_MODE) && defined(NEMU_WITH_WDDM)
 NemuOGLerrorspu_INSTTYPE.win = none
 NemuOGLerrorspu_DEBUG_INSTTYPE.win = both
endif
NemuOGLerrorspu_INTERMEDIATES = \
	$(NEMU_PATH_CROGL_GENFILES)/spu_dispatch_table.h
if1of ($(KBUILD_TARGET), linux solaris freebsd)
 NemuOGLerrorspu_INCS += \
	$(NEMU_MESA_INCS)
endif
NemuOGLerrorspu_SOURCES = \
	$(NEMU_PATH_CROGL_GENFILES)/errorspu.c \
	error/errorspu_init.c
NemuOGLerrorspu_SOURCES.win = \
	error/NemuOGLerrorspu.rc
NemuOGLerrorspu_SOURCES.win.x86 = \
	error/error.def
NemuOGLerrorspu_CLEAN = \
	$(NEMU_PATH_CROGL_GENFILES)/errorspu.c
NemuOGLerrorspu_LIBS = \
	$(NEMU_LIB_OGL_CRUTIL)
ifdef NEMU_WITH_CRHGSMI
NemuOGLerrorspu_DEFS.win    += NEMU_WITH_CRHGSMI
endif
ifdef NEMU_WITH_WDDM
NemuOGLerrorspu_DEFS.win   += NEMU_WITH_WDDM
endif


if defined(NEMU_WITH_WDDM) && defined(NEMU_WITH_CROGL_ADDITIONS)
#
# NemuOGLerrorspu-x86 - x86 NemuOGLerrorspu version built for amd64 build
#
DLLS.win.amd64 += NemuOGLerrorspu-x86
NemuOGLerrorspu-x86_TEMPLATE = NEMUCROGLR3GUESTDLL
NemuOGLerrorspu-x86_EXTENDS = NemuOGLerrorspu
NemuOGLerrorspu-x86_BLD_TRG_ARCH = x86
NemuOGLerrorspu-x86_LIBS = \
	$(NEMU_LIB_OGL_CRUTIL_X86)
NemuOGLerrorspu-x86_DEFS = $(NemuOGLerrorspu_DEFS) NEMU_WDDM_WOW64
endif

#
# NemuOGLhosterrorspu
#
NemuOGLhosterrorspu_EXTENDS  = NemuOGLerrorspu
NemuOGLhosterrorspu_TEMPLATE = NEMUCROGLR3HOSTDLL
if defined(NEMU_SIGNING_MODE) && defined(NEMU_WITH_WDDM)
 NemuOGLhosterrorspu_INSTTYPE.win = both
endif
NemuOGLhosterrorspu_LDFLAGS.darwin += $(NemuOGLerrorspu_LDFLAGS.darwin) \
	-install_name $(NEMU_DYLD_EXECUTABLE_PATH)/NemuOGLhosterrorspu.dylib
NemuOGLhosterrorspu_LIBS  = \
	$(NEMU_LIB_OGL_HOSTCRUTIL) \
	$(LIB_RUNTIME)

#
# Generate files for NemuOGLerrorspu and NemuOGLhosterrorspu.
#
$(NEMU_PATH_CROGL_GENFILES)/errorspu.c: $(PATH_SUB_CURRENT)/error/error.py $(NEMU_CROGL_API_FILES)
	$(call MSG_GENERATE,python,$@,$<)
	$(QUIET)$(call NEMU_CROGL_PYTHON_ENV,$(NEMU_PATH_CROGL_PYTHON_INCLUDE),$@) $(NEMU_BLD_PYTHON) $< $(NEMU_PATH_CROGL_GLAPI)
include $(FILE_KBUILD_SUB_FOOTER)

