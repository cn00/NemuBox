# $Id: Config.kmk $
## @file
# kBuild configuration for the Nemu EFI firmware.
#
# Note! kBuild is only used for the build tools, the rest is handled by the
#       very custom EFI build system.
#

#
# Copyright (C) 2013-2015 Oracle Corporation
#
# This file is part of VirtualBox Open Source Edition (OSE), as
# available from http://www.virtualbox.org. This file is free software;
# you can redistribute it and/or modify it under the terms of the GNU
# General Public License (GPL) as published by the Free Software
# Foundation, in version 2 as it comes in the "COPYING" file of the
# VirtualBox OSE distribution. VirtualBox OSE is distributed in the
# hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
#
# The contents of this file may alternatively be used under the terms
# of the Common Development and Distribution License Version 1.0
# (CDDL) only, as it comes in the "COPYING.CDDL" file of the
# VirtualBox OSE distribution, in which case the provisions of the
# CDDL are applicable instead of those of the GPL.
#
# You may elect to license modified versions of this file under the
# terms and conditions of either the GPL or the CDDL or both.
#

NEMU_EFI_FIRMWARE_CONFIG_KMK_INCLUDED = 1

# Include the next configure file above us.
ifndef NEMU_DEVICES_CONFIG_KMK_INCLUDED
 include $(PATH_ROOT)/src/Nemu/Devices/Config.kmk
endif

#
# Globals.
#
NEMU_PATH_EFI_FIRMWARE = $(PATH_ROOT)/src/Nemu/Devices/EFI/Firmware
NEMU_PATH_STAGE_EFI_BLDPROGS = $(PATH_STAGE)/EfiBldProgs
NEMU_EFI_BUILD_TARGET  = $(if-expr $(intersects release profile, $(KBUILD_TYPE)),RELEASE,DEBUG)
NEMU_EFI_OUTPUT_SUBDIR = $(NEMU_EFI_BUILD_TARGET)_$(NEMU_EFI_TOOL_CHAIN)


#
# Decide which tool chain to use for the EFI binaries.
# Note! We're using our own stripped down tools_def.txt: nemu-tools_def.txt.
#
ifeq ($(KBUILD_HOST),win)
 NEMU_EFI_TOOL_CHAIN := VS2010
else
 NEMU_EFI_TOOL_CHAIN = UNIXGCC
 if !defined(NEMU_PATH_PREFIX_MINGW32) && !defined(NEMU_PATH_PREFIX_MINGW64)
  $(info Requires NEMU_PATH_PREFIX_MINGW32 and/or NEMU_PATH_PREFIX_MINGW64 to point something mingw like or there must be some mingw like in the PATH.)
  $(info )
  $(info Recent Fedora: sudo yum install mingw64-gcc mingw64-gcc-c++ mingw64-binutils mingw32-gcc mingw32-gcc-c++ mingw32-binutils)
  $(info )
  $(info Newer Debian and forks: sudo apt-get install binutils-mingw-w64 gcc-mingw-w64 g++-mingw-w64 )
  $(info Older Debian and forks: sudo apt-get install mingw32-binutils mingw32 mingw32-runtime )
  $(info )
  $(info Gentoo: crossdev -S -P -v -t i686-pc-mingw32 && crossdev -S -P -v -t x86_64-pc-mingw32)
  $(info )
  $(error Needs mingw32/64)
 endif
endif


#
# Make a build program template of our own.
#
TEMPLATE_NemuEfiBldProg = EFI build program.
TEMPLATE_NemuEfiBldProg_EXTENDS = NemuBldProg
TEMPLATE_NemuEfiBldProg_INST = EfiBldProgs/
TEMPLATE_NemuEfiBldProg_INSTTYPE = stage
TEMPLATE_NemuEfiBldProg_INCS = $(TEMPLATE_NemuBldProg_INCS) \
	$(NEMU_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Include/IndustryStandard \
	$(NEMU_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Common \
	$(NEMU_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Include \
	$(NEMU_PATH_EFI_FIRMWARE)/BaseTools/Source/C

TEMPLATE_NemuEfiBldProg_INCS.x86 = $(TEMPLATE_NemuBldProg_INCS.x86) \
	$(NEMU_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Include/IA32

TEMPLATE_NemuEfiBldProg_INCS.amd64 = $(TEMPLATE_NemuBldProg_INCS.amd64) \
	$(NEMU_PATH_EFI_FIRMWARE)/BaseTools/Source/C/Include/X64

TEMPLATE_NemuEfiBldProg_LIBS = \
	$(NEMU_PATH_STAGE_EFI_BLDPROGS)/EfiBldCommonLib$(NEMU_SUFF_LIB) \
	$(TEMPLATE_NemuBldProg_LIBS)
ifn1of ($(KBUILD_HOST),win) # This stuff isn't up to our standard at all! :/
 TEMPLATE_NemuEfiBldProg_CFLAGS = $(filter-out -pedantic,$(TEMPLATE_NemuBldProg_CFLAGS)) \
 	-Wno-sign-compare -Wno-missing-prototypes -Wno-strict-prototypes \
	-Wno-implicit-function-declaration -Wno-missing-declarations -Wno-shadow -Wno-format -Wno-empty-body
 TEMPLATE_NemuEfiBldProg_CXXFLAGS = $(filter-out -pedantic,$(TEMPLATE_NemuBldProg_CXXFLAGS)) \
 	-Wno-all -Wno-shadow -Wno-empty-body
endif


# There isn't a BLDLIBRARIES target group, so we have to override the build
# target for libraries used by build programs and keep them in LIBRARIES.
TEMPLATE_NemuEfiBldLib = Library for an EFI build program.
TEMPLATE_NemuEfiBldLib_EXTENDS = NemuEfiBldProg
TEMPLATE_NemuEfiBldLib_BLD_TRG      := $(KBUILD_HOST)
TEMPLATE_NemuEfiBldLib_BLD_TRG_ARCH := $(KBUILD_HOST_ARCH)
TEMPLATE_NemuEfiBldLib_BLD_TRG_CPU  := $(KBUILD_HOST_CPU)


#
# The name of the subdirectory which the .pdb, .efi and other output files ends
# up in, apparently.  In the generated makefiles, DEBUG_DIR points to them.
#
NEMU_EFI_DEBUG_DIR = DEBUG

#
# List of modules that ends up producing .efi, .debug and .pdb files.
#
NEMU_EFI_MODULES = \
	IntelFrameworkModulePkg/Bus/Isa/IsaBusDxe/IsaBusDxe/$(NEMU_EFI_DEBUG_DIR)/IsaBusDxe \
	IntelFrameworkModulePkg/Bus/Isa/IsaFloppyDxe/IsaFloppyDxe/$(NEMU_EFI_DEBUG_DIR)/IsaFloppyDxe \
	IntelFrameworkModulePkg/Bus/Isa/IsaIoDxe/IsaIoDxe/$(NEMU_EFI_DEBUG_DIR)/IsaIoDxe \
	IntelFrameworkModulePkg/Bus/Isa/IsaSerialDxe/IsaSerialDxe/$(NEMU_EFI_DEBUG_DIR)/IsaSerialDxe \
	IntelFrameworkModulePkg/Bus/Isa/Ps2KeyboardDxe/Ps2keyboardDxe/$(NEMU_EFI_DEBUG_DIR)/Ps2KeyboardDxe \
	IntelFrameworkModulePkg/Bus/Pci/IdeBusDxe/IdeBusDxe/$(NEMU_EFI_DEBUG_DIR)/IdeBusDxe \
	IntelFrameworkModulePkg/Universal/BdsDxe/BdsDxe/$(NEMU_EFI_DEBUG_DIR)/BdsDxe \
	IntelFrameworkModulePkg/Universal/DataHubDxe/DataHubDxe/$(NEMU_EFI_DEBUG_DIR)/DataHubDxe \
	IntelFrameworkModulePkg/Universal/StatusCode/Pei/StatusCodePei/$(NEMU_EFI_DEBUG_DIR)/StatusCodePei \
	IntelFrameworkModulePkg/Universal/StatusCode/RuntimeDxe/StatusCodeRuntimeDxe/$(NEMU_EFI_DEBUG_DIR)/StatusCodeRuntimeDxe \
	MdeModulePkg/Bus/Ata/AtaAtapiPassThru/AtaAtapiPassThru/$(NEMU_EFI_DEBUG_DIR)/AtaAtapiPassThruDxe \
	MdeModulePkg/Bus/Ata/AtaBusDxe/AtaBusDxe/$(NEMU_EFI_DEBUG_DIR)/AtaBusDxe \
	MdeModulePkg/Bus/Pci/EhciDxe/EhciDxe/$(NEMU_EFI_DEBUG_DIR)/EhciDxe \
	MdeModulePkg/Bus/Pci/PciBusDxe/PciBusDxe/$(NEMU_EFI_DEBUG_DIR)/PciBusDxe \
	MdeModulePkg/Bus/Scsi/ScsiBusDxe/ScsiBusDxe/$(NEMU_EFI_DEBUG_DIR)/ScsiBus \
	MdeModulePkg/Bus/Scsi/ScsiDiskDxe/ScsiDiskDxe/$(NEMU_EFI_DEBUG_DIR)/ScsiDisk \
	MdeModulePkg/Bus/Usb/UsbBusDxe/UsbBusDxe/$(NEMU_EFI_DEBUG_DIR)/UsbBusDxe \
	MdeModulePkg/Bus/Usb/UsbKbDxe/UsbKbDxe/$(NEMU_EFI_DEBUG_DIR)/UsbKbDxe \
	MdeModulePkg/Bus/Usb/UsbMassStorageDxe/UsbMassStorageDxe/$(NEMU_EFI_DEBUG_DIR)/UsbMassStorageDxe \
	MdeModulePkg/Core/Dxe/DxeMain/$(NEMU_EFI_DEBUG_DIR)/DxeCore \
	MdeModulePkg/Core/DxeIplPeim/DxeIpl/$(NEMU_EFI_DEBUG_DIR)/DxeIpl \
	MdeModulePkg/Core/Pei/PeiMain/$(NEMU_EFI_DEBUG_DIR)/PeiCore \
	MdeModulePkg/Core/RuntimeDxe/RuntimeDxe/$(NEMU_EFI_DEBUG_DIR)/RuntimeDxe \
	MdeModulePkg/Universal/Acpi/AcpiTableDxe/AcpiTableDxe/$(NEMU_EFI_DEBUG_DIR)/AcpiTableDxe \
	MdeModulePkg/Universal/CapsuleRuntimeDxe/CapsuleRuntimeDxe/$(NEMU_EFI_DEBUG_DIR)/CapsuleRuntimeDxe \
	MdeModulePkg/Universal/Console/ConPlatformDxe/ConPlatformDxe/$(NEMU_EFI_DEBUG_DIR)/ConPlatformDxe \
	MdeModulePkg/Universal/Console/ConSplitterDxe/ConSplitterDxe/$(NEMU_EFI_DEBUG_DIR)/ConSplitterDxe \
	MdeModulePkg/Universal/Console/GraphicsConsoleDxe/GraphicsConsoleDxe/$(NEMU_EFI_DEBUG_DIR)/GraphicsConsoleDxe \
	MdeModulePkg/Universal/Console/TerminalDxe/TerminalDxe/$(NEMU_EFI_DEBUG_DIR)/TerminalDxe \
	MdeModulePkg/Universal/DevicePathDxe/DevicePathDxe/$(NEMU_EFI_DEBUG_DIR)/DevicePathDxe \
	MdeModulePkg/Universal/Disk/DiskIoDxe/DiskIoDxe/$(NEMU_EFI_DEBUG_DIR)/DiskIoDxe \
	MdeModulePkg/Universal/Disk/UnicodeCollation/EnglishDxe/EnglishDxe/$(NEMU_EFI_DEBUG_DIR)/EnglishDxe \
	MdeModulePkg/Universal/EbcDxe/EbcDxe/$(NEMU_EFI_DEBUG_DIR)/EbcDxe \
	MdeModulePkg/Universal/FaultTolerantWriteDxe/FaultTolerantWriteDxe/$(NEMU_EFI_DEBUG_DIR)/FaultTolerantWriteDxe \
	MdeModulePkg/Universal/HiiDatabaseDxe/HiiDatabaseDxe/$(NEMU_EFI_DEBUG_DIR)/HiiDatabase \
	MdeModulePkg/Universal/MemoryTest/NullMemoryTestDxe/NullMemoryTestDxe/$(NEMU_EFI_DEBUG_DIR)/NullMemoryTestDxe \
	MdeModulePkg/Universal/Metronome/Metronome/$(NEMU_EFI_DEBUG_DIR)/Metronome \
	MdeModulePkg/Universal/MonotonicCounterRuntimeDxe/MonotonicCounterRuntimeDxe/$(NEMU_EFI_DEBUG_DIR)/MonotonicCounterRuntimeDxe \
	MdeModulePkg/Universal/PCD/Dxe/Pcd/$(NEMU_EFI_DEBUG_DIR)/PcdDxe \
	MdeModulePkg/Universal/PCD/Pei/Pcd/$(NEMU_EFI_DEBUG_DIR)/PcdPeim \
	MdeModulePkg/Universal/PrintDxe/PrintDxe/$(NEMU_EFI_DEBUG_DIR)/PrintDxe \
	MdeModulePkg/Universal/ReportStatusCodeRouter/RuntimeDxe/ReportStatusCodeRouterRuntimeDxe/$(NEMU_EFI_DEBUG_DIR)/ReportStatusCodeRouterRuntimeDxe \
	MdeModulePkg/Universal/SecurityStubDxe/SecurityStubDxe/$(NEMU_EFI_DEBUG_DIR)/SecurityStubDxe \
	MdeModulePkg/Universal/SetupBrowserDxe/SetupBrowserDxe/$(NEMU_EFI_DEBUG_DIR)/SetupBrowser \
	MdeModulePkg/Universal/SmbiosDxe/SmbiosDxe/$(NEMU_EFI_DEBUG_DIR)/SmbiosDxe \
	MdeModulePkg/Universal/StatusCodeHandler/RuntimeDxe/StatusCodeHandlerRuntimeDxe/$(NEMU_EFI_DEBUG_DIR)/StatusCodeHandlerRuntimeDxe \
	MdeModulePkg/Universal/WatchdogTimerDxe/WatchdogTimer/$(NEMU_EFI_DEBUG_DIR)/WatchdogTimer \
	OvmfPkg/BlockMmioToBlockIoDxe/BlockIo/$(NEMU_EFI_DEBUG_DIR)/BlockMmioToBlockIoDxe \
	OvmfPkg/EmuVariableFvbRuntimeDxe/Fvb/$(NEMU_EFI_DEBUG_DIR)/EmuVariableFvbRuntimeDxe \
	OvmfPkg/Sec/SecMain/$(NEMU_EFI_DEBUG_DIR)/SecMain \
	OvmfPkg/SmbiosPlatformDxe/SmbiosPlatformDxe/$(NEMU_EFI_DEBUG_DIR)/SmbiosPlatformDxe \
	PcAtChipsetPkg/8254TimerDxe/8254Timer/$(NEMU_EFI_DEBUG_DIR)/Timer \
	PcAtChipsetPkg/8259InterruptControllerDxe/8259/$(NEMU_EFI_DEBUG_DIR)/Legacy8259 \
	PcAtChipsetPkg/Bus/Pci/IdeControllerDxe/IdeControllerDxe/$(NEMU_EFI_DEBUG_DIR)/IdeController \
	PcAtChipsetPkg/IsaAcpiDxe/IsaAcpi/$(NEMU_EFI_DEBUG_DIR)/IsaAcpi \
	PcAtChipsetPkg/KbcResetDxe/Reset/$(NEMU_EFI_DEBUG_DIR)/KbcReset \
	PcAtChipsetPkg/PcatRealTimeClockRuntimeDxe/PcatRealTimeClockRuntimeDxe/$(NEMU_EFI_DEBUG_DIR)/PcRtc \
	PcAtChipsetPkg/PciHostBridgeDxe/PciHostBridgeDxe/$(NEMU_EFI_DEBUG_DIR)/PciHostBridge \
	ShellPkg/Application/Shell/Shell/$(NEMU_EFI_DEBUG_DIR)/Shell \
	UefiCpuPkg/CpuDxe/CpuDxe/$(NEMU_EFI_DEBUG_DIR)/CpuDxe \
	UefiCpuPkg/CpuIo2Dxe/CpuIo2Dxe/$(NEMU_EFI_DEBUG_DIR)/CpuIo2Dxe \
	NemuPkg/AcpiPlatformDxe/AcpiPlatformDxe/$(NEMU_EFI_DEBUG_DIR)/AcpiPlatform \
	NemuPkg/PartitionDxe/PartitionDxe/$(NEMU_EFI_DEBUG_DIR)/PartitionDxe \
	NemuPkg/PlatformPei/PlatformPei/$(NEMU_EFI_DEBUG_DIR)/PlatformPei \
	NemuPkg/NemuAppleSim/NemuAppleSim/$(NEMU_EFI_DEBUG_DIR)/NemuAppleSim \
	NemuPkg/NemuFsDxe/NemuHfs/$(NEMU_EFI_DEBUG_DIR)/NemuHfs \
	NemuPkg/NemuFsDxe/NemuIso9660/$(NEMU_EFI_DEBUG_DIR)/NemuIso9600 \
	NemuPkg/NemuSysTables/NemuSysTables/$(NEMU_EFI_DEBUG_DIR)/NemuSysTables \
	NemuPkg/NemuVariable/NemuVariableRuntimeDxe/$(NEMU_EFI_DEBUG_DIR)/EmuVariableRuntimeDxe \
	NemuPkg/NemuVgaDxe/NemuVgaDxe/$(NEMU_EFI_DEBUG_DIR)/NemuVgaDxe \
	NemuPkg/NemuVgaMiniPortDxe/NemuVgaMiniPortDxe/$(NEMU_EFI_DEBUG_DIR)/NemuVgaMiniPortDxe \

# Version of NEMU_EFI_MODULES without directories. (Using $(value ) to avoid
# expanding all the build target macros and then immediately discarding them.)
NEMU_EFI_MODULES_FLAT = $(notdir $(value NEMU_EFI_MODULES))

